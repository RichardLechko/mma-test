import { c as createComponent, r as renderTemplate, e as renderComponent, m as maybeRenderHead, b as addAttribute } from '../chunks/astro/server_C_1jQ3jI.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../chunks/Layout_BZw4Q8am.mjs';
import { s as supabase } from '../chunks/supabase_CyFqHHS4.mjs';
import { $ as $$FilterDropdown } from '../chunks/FilterDropdown_CxyROIjD.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const {
    data: allFighters,
    error,
    count
  } = await supabase.from("fighters").select(
    "id, name, weight_class, nationality, wins, losses, draws, rank, status, no_contests",
    { count: "exact" }
  ).order("name", { ascending: true }).range(0, 9);
  const { data: nationalityData } = await supabase.from("fighters").select("nationality").not("nationality", "is", null);
  const { data: weightClassData } = await supabase.from("fighters").select("weight_class").not("weight_class", "is", null);
  const fightersList = allFighters || [];
  const totalFighters = count || 0;
  const weightClassOrderMap = {
    // Men's divisions (lightest to heaviest)
    Flyweight: 1,
    Bantamweight: 2,
    Featherweight: 3,
    Lightweight: 4,
    Welterweight: 5,
    Middleweight: 6,
    "Light Heavyweight": 7,
    Heavyweight: 8,
    // Women's divisions (lightest to heaviest)
    "Women's Strawweight": 9,
    "Women's Flyweight": 10,
    "Women's Bantamweight": 11,
    "Women's Featherweight": 12
  };
  const weightClasses = Array.from(
    new Set(
      (weightClassData || []).map((item) => item.weight_class).filter(Boolean)
    )
  ).filter((wc) => Boolean(wc)).sort((a, b) => {
    const aExists = a in weightClassOrderMap;
    const bExists = b in weightClassOrderMap;
    if (aExists && bExists) {
      return weightClassOrderMap[a] - weightClassOrderMap[b];
    }
    if (aExists) return -1;
    if (bExists) return 1;
    return a.localeCompare(b);
  });
  const nationalities = Array.from(
    new Set(
      (nationalityData || []).map((item) => item.nationality).filter(Boolean)
    )
  ).sort();
  const initialVisible = 10;
  const fightersData = JSON.stringify(fightersList);
  const statusOptions = [
    { value: "", label: "All" },
    { value: "Active", label: "Active" },
    { value: "Retired", label: "Retired" }
  ];
  const championOptions = [
    { value: "", label: "All" },
    { value: "champion", label: "Champions Only" }
  ];
  const weightClassOptions = [
    { value: "", label: "All" },
    ...weightClasses.map((wc) => ({
      value: wc || "",
      label: wc || "Unknown"
    }))
  ];
  const nationalityOptions = [
    { value: "", label: "All" },
    ...nationalities.map((nat) => ({
      value: nat || "",
      label: nat || "Unknown"
    }))
  ];
  return renderTemplate(_a || (_a = __template(["", " <script>\n  document.addEventListener('DOMContentLoaded', () => {\n    // Elements for searching\n    const searchInput = document.getElementById('fighter-search');\n    const clearSearchBtn = document.getElementById('clear-search');\n\n    // Filter elements\n    const statusFilter = document.getElementById('status-filter');\n    const championFilter = document.getElementById('champion-filter');\n    const resetFiltersButton = document.getElementById('reset-filters');\n    const selectedFiltersPool = document.getElementById(\n      'selected-filters-pool',\n    );\n\n    // Display elements\n    const loadMoreButton = document.getElementById('load-more');\n    const fightersGrid = document.getElementById('fighters-grid');\n    const shownCountSpan = document.getElementById('shown-count');\n    const totalCountSpan = document.getElementById('total-count');\n    const filteredTextSpan = document.getElementById('filtered-text');\n    const noResultsDiv = document.getElementById('no-results');\n\n    // Parse fighters data from server\n    const initialFighters = JSON.parse(\n      document.getElementById('fighters-data').textContent,\n    );\n\n    // Get the total count from the server-side rendered value\n    const totalFightersFromServer = parseInt(totalCountSpan.textContent);\n\n    // Initialize fighters lists\n    let allFighters = [...initialFighters];\n    let visibleCount = parseInt(\n      loadMoreButton.getAttribute('data-current-count') || '10',\n    );\n\n    // Search term variable\n    let searchTerm = '';\n\n    // Track multi-select filters\n    const selectedNationalities = new Set();\n    const selectedWeightClasses = new Set();\n\n    // Track if there's a request in progress\n    let isSearching = false;\n\n    // Debounce helper function\n    function debounce(func, delay) {\n      let timeoutId;\n      return function (...args) {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          func.apply(this, args);\n        }, delay);\n      };\n    }\n\n    if (searchInput) {\n      searchInput.addEventListener('input', function (e) {\n        // Get current input and cursor position\n        let currentValue = this.value;\n        const cursorPos = this.selectionStart;\n\n        // Only allow letters and a single space between words\n        let sanitized = currentValue.replace(/[^a-zA-Z ]/g, ''); // Only letters and spaces\n\n        // Handle multiple spaces - convert to single space\n        sanitized = sanitized.replace(/\\s{2,}/g, ' ');\n\n        // If the value changed after sanitization, update the input\n        if (sanitized !== currentValue) {\n          this.value = sanitized;\n          // Adjust cursor position\n          this.setSelectionRange(\n            Math.min(cursorPos, sanitized.length),\n            Math.min(cursorPos, sanitized.length),\n          );\n        }\n\n        // Only search if 3+ characters or empty\n        if (sanitized.length >= 3 || sanitized.length === 0) {\n          searchTerm = sanitized.toLowerCase();\n\n          // Show/hide clear button\n          clearSearchBtn.style.display = searchTerm ? 'flex' : 'none';\n\n          // Debounce the API call to not spam the server while typing\n          debouncedSearch();\n        }\n      });\n\n      // Create debounced search function\n      const debouncedSearch = debounce(() => {\n        // Reset visible count and reload fighters\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      }, 300);\n    }\n\n    // Clear search button\n    if (clearSearchBtn) {\n      clearSearchBtn.addEventListener('click', function () {\n        searchInput.value = '';\n        searchTerm = '';\n        this.style.display = 'none';\n        // Reset visible count and reload fighters\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    // Main function to fetch and filter fighters\n    async function applyFilters(isLoadMore = false) {\n      // Prevent multiple simultaneous requests\n      if (isSearching) return;\n\n      isSearching = true;\n      const status = statusFilter.value;\n      const isChampion = championFilter.value === 'champion';\n\n      // Update filter tags\n      updateFilterTags(status, isChampion, searchTerm);\n\n      // Show loading state in the grid\n      if (!isLoadMore) {\n        fightersGrid.innerHTML =\n          '<div class=\"loading-indicator\" style=\"text-align: center; padding: 2rem;\">Loading fighters...</div>';\n      } else {\n        // For load more, just show loading in the button\n        loadMoreButton.innerText = 'Loading...';\n        loadMoreButton.disabled = true;\n      }\n\n      try {\n        // Build query params for API request\n        const params = new URLSearchParams();\n\n        // Add pagination params - always 10 per batch, except for last batch\n        params.append(\n          'offset',\n          isLoadMore ? allFighters.length.toString() : '0',\n        );\n\n        const totalFighters = parseInt(totalCountSpan.textContent);\n        const remainingFighters = totalFighters - allFighters.length;\n\n        // Always load 10 fighters per batch, unless less than 10 remain\n        if (isLoadMore && remainingFighters > 0 && remainingFighters < 10) {\n          params.append('limit', remainingFighters.toString());\n        } else {\n          params.append('limit', '10'); // Standard batch size\n        }\n\n        // Add filters\n        if (searchTerm) {\n          params.append('search', searchTerm);\n        }\n\n        if (status) {\n          params.append('status', status);\n        }\n\n        if (isChampion) {\n          params.append('champion', 'true');\n        }\n\n        // Add multi-select filters as array params\n        if (selectedWeightClasses.size > 0) {\n          selectedWeightClasses.forEach(wc => {\n            params.append('weightClass', wc);\n          });\n        }\n\n        if (selectedNationalities.size > 0) {\n          selectedNationalities.forEach(nat => {\n            params.append('nationality', nat);\n          });\n        }\n\n        // Fetch fighters with applied filters\n        const response = await fetch(`/api/fighters?${params.toString()}`);\n\n        if (!response.ok) {\n          throw new Error(`Failed to fetch fighters: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Update fighters data\n        if (!isLoadMore) {\n          // Replace all fighters if this is a new filter\n          allFighters = data.fighters || [];\n        } else {\n          // Append fighters if loading more\n          if (data.fighters && data.fighters.length > 0) {\n            allFighters = [...allFighters, ...data.fighters];\n          }\n        }\n\n        // Update count display - this is important to get the total for the current filters\n        totalCountSpan.textContent =\n          data.count !== undefined\n            ? data.count.toString()\n            : totalFightersFromServer.toString();\n\n        // Clear the grid if not loading more\n        if (!isLoadMore) {\n          fightersGrid.innerHTML = '';\n        }\n\n        // Update UI\n        updateFightersDisplay();\n\n        // Update dropdown displays\n        updateDropdownDisplays();\n      } catch (error) {\n        console.error('Error applying filters:', error);\n        // Clear the grid and show error\n        if (!isLoadMore) {\n          fightersGrid.innerHTML = `\n            <div class=\"error\" style=\"text-align: center; padding: 2rem; color: #ff4444;\">\n              Error loading fighters. Please try again.\n            </div>\n          `;\n        } else {\n          loadMoreButton.innerText = 'Error - Try Again';\n        }\n      } finally {\n        isSearching = false;\n        if (isLoadMore) {\n          loadMoreButton.disabled = false;\n          loadMoreButton.innerText = 'Load More Fighters';\n        }\n      }\n    }\n\n    function updateFilterTags(status, isChampion, search) {\n      // Clear existing tags\n      selectedFiltersPool.innerHTML = '';\n\n      // Add search tag if applicable with title case\n      if (search) {\n        // Convert to title case\n        const titleCased = search\n          .split(' ')\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ');\n\n        addFilterTag('search', search, `Search: ${titleCased}`);\n      }\n\n      // Rest of filter tags logic\n      if (status) {\n        addFilterTag('status', status, status);\n      }\n\n      if (isChampion) {\n        addFilterTag('champion', 'champion', 'Champions Only');\n      }\n\n      selectedWeightClasses.forEach(weightClass => {\n        addFilterTag('weight-class', weightClass, weightClass);\n      });\n\n      selectedNationalities.forEach(nationality => {\n        addFilterTag('nationality', nationality, nationality);\n      });\n    }\n\n    // Function to add a filter tag\n    function addFilterTag(type, value, label) {\n      const filterTag = document.createElement('div');\n      filterTag.className = `filter-tag ${type}`;\n      filterTag.dataset.value = value;\n      filterTag.innerHTML = `\n        ${label}\n        <span class=\"filter-tag-remove\">\xD7</span>\n      `;\n\n      // Add click handler to remove tag\n      filterTag\n        .querySelector('.filter-tag-remove')\n        .addEventListener('click', () => {\n          removeFilter(type, value);\n        });\n\n      selectedFiltersPool.appendChild(filterTag);\n    }\n\n    // Function to remove a filter\n    function removeFilter(type, value) {\n      switch (type) {\n        case 'search':\n          searchInput.value = '';\n          searchTerm = '';\n          clearSearchBtn.style.display = 'none';\n          break;\n        case 'status':\n          statusFilter.value = '';\n          break;\n        case 'champion':\n          championFilter.value = '';\n          break;\n        case 'weight-class':\n          selectedWeightClasses.delete(value);\n          break;\n        case 'nationality':\n          selectedNationalities.delete(value);\n          break;\n      }\n\n      // When removing a filter, reset to first batch\n      visibleCount = 10;\n      allFighters = [];\n      applyFilters();\n    }\n\n    // Helper function to update dropdown display text\n    function updateDropdownText(dropdown, value) {\n      if (!dropdown) return;\n\n      const selectedDisplay = dropdown.querySelector('.filter-selected span');\n      const menuItems = dropdown.querySelectorAll('.filter-item');\n\n      // Reset active state on all items\n      menuItems.forEach(item => {\n        item.classList.remove('active');\n\n        if (item.getAttribute('data-value') === value) {\n          // Update text display and set this item as active\n          selectedDisplay.textContent = item.textContent;\n          item.classList.add('active');\n        }\n      });\n\n      // If no value selected, set to \"All\"\n      if (!value) {\n        const defaultItem = dropdown.querySelector(\n          '.filter-item[data-value=\"\"]',\n        );\n        if (defaultItem) {\n          selectedDisplay.textContent = defaultItem.textContent;\n          defaultItem.classList.add('active');\n        }\n      }\n    }\n\n    // Update all dropdown displays\n    function updateDropdownDisplays() {\n      const statusDropdown = document.getElementById('status-filter-dropdown');\n      const championDropdown = document.getElementById(\n        'champion-filter-dropdown',\n      );\n      const weightClassDropdown = document.getElementById(\n        'weight-class-filter-dropdown',\n      );\n      const nationalityDropdown = document.getElementById(\n        'nationality-filter-dropdown',\n      );\n\n      // Update the selected text for each dropdown\n      updateDropdownText(statusDropdown, statusFilter.value);\n      updateDropdownText(championDropdown, championFilter.value);\n\n      // Update multi-select dropdown text\n      if (weightClassDropdown) {\n        const display = weightClassDropdown.querySelector(\n          '.filter-selected span',\n        );\n        if (selectedWeightClasses.size === 0) {\n          display.textContent = 'All';\n        } else {\n          display.textContent = `${selectedWeightClasses.size} selected`;\n        }\n      }\n\n      if (nationalityDropdown) {\n        const display = nationalityDropdown.querySelector(\n          '.filter-selected span',\n        );\n        if (selectedNationalities.size === 0) {\n          display.textContent = 'All';\n        } else {\n          display.textContent = `${selectedNationalities.size} selected`;\n        }\n      }\n    }\n\n    function updateFightersDisplay() {\n      fightersGrid.innerHTML = '';\n\n      if (allFighters.length === 0) {\n        noResultsDiv.style.display = 'block';\n        loadMoreButton.style.display = 'none';\n        return;\n      }\n\n      noResultsDiv.style.display = 'none';\n\n      allFighters.forEach(fighter => {\n        const fighterCard = document.createElement('a');\n        fighterCard.href = `/fighters/${fighter.id}`;\n        fighterCard.className = 'fighter-card';\n        fighterCard.dataset.weightClass = fighter.weight_class || '';\n        fighterCard.dataset.nationality = fighter.nationality || '';\n        fighterCard.dataset.status = fighter.status || '';\n        fighterCard.dataset.rank = fighter.rank || '';\n\n        const wins = fighter.wins || 0;\n        const losses = fighter.losses || 0;\n        const draws = fighter.draws || 0;\n        const noContests = fighter.no_contests || 0;\n\n        let statusBadgeHTML = '';\n        if (fighter.rank === 'Champion') {\n          statusBadgeHTML = '<span class=\"champion-badge\">Champion</span>';\n        } else if (fighter.status === 'Active') {\n          statusBadgeHTML = '<span class=\"active-badge\">Active</span>';\n        } else if (\n          fighter.status === 'Retired' ||\n          fighter.status === 'Not Fighting'\n        ) {\n          statusBadgeHTML = '<span class=\"retired-badge\">Retired</span>';\n        }\n\n        fighterCard.innerHTML = `\n          <div class=\"fighter-header\">\n            <h2>${fighter.name}</h2>\n            ${statusBadgeHTML}\n          </div>\n          <div class=\"fighter-details\">\n            ${fighter.weight_class ? `<p class=\"fighter-weight-class\">${fighter.weight_class}</p>` : ''}\n            <div class=\"fighter-record\">\n              <span class=\"record-value\">${wins}-${losses}-${draws}</span>\n              <span class=\"record-label\">W-L-D</span>\n              <span class=\"record-nc\">${noContests} NC</span>\n            </div>\n            ${\n              fighter.status !== 'Retired' &&\n              fighter.rank &&\n              fighter.rank !== 'Champion'\n                ? fighter.rank === 'Unranked'\n                  ? `<div class=\"fighter-rank\"></div>`\n                  : `<div class=\"fighter-rank\">Rank: ${fighter.rank}</div>`\n                : ''\n            }\n            ${\n              fighter.nationality\n                ? `<p class=\"fighter-nationality\">${fighter.nationality}</p>`\n                : ''\n            }\n          </div>\n        `;\n\n        fightersGrid.appendChild(fighterCard);\n      });\n\n      shownCountSpan.textContent = allFighters.length.toString();\n\n      const isFiltered =\n        searchTerm ||\n        statusFilter.value ||\n        championFilter.value ||\n        selectedWeightClasses.size > 0 ||\n        selectedNationalities.size > 0;\n\n      filteredTextSpan.style.display = isFiltered ? 'inline' : 'none';\n\n      const totalFighters = parseInt(totalCountSpan.textContent);\n      const hasMoreToLoad = allFighters.length < totalFighters;\n\n      loadMoreButton.style.display = hasMoreToLoad ? 'block' : 'none';\n      loadMoreButton.disabled = false;\n      loadMoreButton.innerText = 'Load More Fighters';\n    }\n\n    if (loadMoreButton) {\n      loadMoreButton.addEventListener('click', async () => {\n        applyFilters(true);\n      });\n    }\n\n    if (statusFilter) {\n      statusFilter.addEventListener('change', function () {\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    if (championFilter) {\n      championFilter.addEventListener('change', function () {\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    if (resetFiltersButton) {\n      resetFiltersButton.addEventListener('click', () => {\n        searchInput.value = '';\n        searchTerm = '';\n        clearSearchBtn.style.display = 'none';\n\n        statusFilter.value = '';\n        championFilter.value = '';\n\n        selectedNationalities.clear();\n        selectedWeightClasses.clear();\n\n        selectedFiltersPool.innerHTML = '';\n\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    document.querySelectorAll('.filter-dropdown').forEach(dropdown => {\n      const type = dropdown.id.replace('-filter-dropdown', '');\n      const select = document.getElementById(`${type}-filter`);\n\n      if (select) {\n        dropdown.querySelectorAll('.filter-item').forEach(item => {\n          item.addEventListener('click', function () {\n            const value = this.getAttribute('data-value');\n\n            if (type === 'nationality') {\n              if (value === '') {\n                selectedNationalities.clear();\n              } else {\n                if (selectedNationalities.has(value)) {\n                  selectedNationalities.delete(value);\n                } else {\n                  selectedNationalities.add(value);\n                }\n              }\n              this.classList.toggle('active', selectedNationalities.has(value));\n            } else if (type === 'weight-class') {\n              if (value === '') {\n                selectedWeightClasses.clear();\n              } else {\n                if (selectedWeightClasses.has(value)) {\n                  selectedWeightClasses.delete(value);\n                } else {\n                  selectedWeightClasses.add(value);\n                }\n              }\n              this.classList.toggle('active', selectedWeightClasses.has(value));\n            } else {\n              select.value = value;\n              const event = new Event('change');\n              select.dispatchEvent(event);\n            }\n\n            if (type === 'nationality' || type === 'weight-class') {\n              visibleCount = 10;\n              allFighters = [];\n              applyFilters();\n            }\n          });\n        });\n      }\n    });\n\n    updateFilterTags('', false, '');\n    updateDropdownDisplays();\n  });\n<\/script>"], ["", " <script>\n  document.addEventListener('DOMContentLoaded', () => {\n    // Elements for searching\n    const searchInput = document.getElementById('fighter-search');\n    const clearSearchBtn = document.getElementById('clear-search');\n\n    // Filter elements\n    const statusFilter = document.getElementById('status-filter');\n    const championFilter = document.getElementById('champion-filter');\n    const resetFiltersButton = document.getElementById('reset-filters');\n    const selectedFiltersPool = document.getElementById(\n      'selected-filters-pool',\n    );\n\n    // Display elements\n    const loadMoreButton = document.getElementById('load-more');\n    const fightersGrid = document.getElementById('fighters-grid');\n    const shownCountSpan = document.getElementById('shown-count');\n    const totalCountSpan = document.getElementById('total-count');\n    const filteredTextSpan = document.getElementById('filtered-text');\n    const noResultsDiv = document.getElementById('no-results');\n\n    // Parse fighters data from server\n    const initialFighters = JSON.parse(\n      document.getElementById('fighters-data').textContent,\n    );\n\n    // Get the total count from the server-side rendered value\n    const totalFightersFromServer = parseInt(totalCountSpan.textContent);\n\n    // Initialize fighters lists\n    let allFighters = [...initialFighters];\n    let visibleCount = parseInt(\n      loadMoreButton.getAttribute('data-current-count') || '10',\n    );\n\n    // Search term variable\n    let searchTerm = '';\n\n    // Track multi-select filters\n    const selectedNationalities = new Set();\n    const selectedWeightClasses = new Set();\n\n    // Track if there's a request in progress\n    let isSearching = false;\n\n    // Debounce helper function\n    function debounce(func, delay) {\n      let timeoutId;\n      return function (...args) {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          func.apply(this, args);\n        }, delay);\n      };\n    }\n\n    if (searchInput) {\n      searchInput.addEventListener('input', function (e) {\n        // Get current input and cursor position\n        let currentValue = this.value;\n        const cursorPos = this.selectionStart;\n\n        // Only allow letters and a single space between words\n        let sanitized = currentValue.replace(/[^a-zA-Z ]/g, ''); // Only letters and spaces\n\n        // Handle multiple spaces - convert to single space\n        sanitized = sanitized.replace(/\\\\s{2,}/g, ' ');\n\n        // If the value changed after sanitization, update the input\n        if (sanitized !== currentValue) {\n          this.value = sanitized;\n          // Adjust cursor position\n          this.setSelectionRange(\n            Math.min(cursorPos, sanitized.length),\n            Math.min(cursorPos, sanitized.length),\n          );\n        }\n\n        // Only search if 3+ characters or empty\n        if (sanitized.length >= 3 || sanitized.length === 0) {\n          searchTerm = sanitized.toLowerCase();\n\n          // Show/hide clear button\n          clearSearchBtn.style.display = searchTerm ? 'flex' : 'none';\n\n          // Debounce the API call to not spam the server while typing\n          debouncedSearch();\n        }\n      });\n\n      // Create debounced search function\n      const debouncedSearch = debounce(() => {\n        // Reset visible count and reload fighters\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      }, 300);\n    }\n\n    // Clear search button\n    if (clearSearchBtn) {\n      clearSearchBtn.addEventListener('click', function () {\n        searchInput.value = '';\n        searchTerm = '';\n        this.style.display = 'none';\n        // Reset visible count and reload fighters\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    // Main function to fetch and filter fighters\n    async function applyFilters(isLoadMore = false) {\n      // Prevent multiple simultaneous requests\n      if (isSearching) return;\n\n      isSearching = true;\n      const status = statusFilter.value;\n      const isChampion = championFilter.value === 'champion';\n\n      // Update filter tags\n      updateFilterTags(status, isChampion, searchTerm);\n\n      // Show loading state in the grid\n      if (!isLoadMore) {\n        fightersGrid.innerHTML =\n          '<div class=\"loading-indicator\" style=\"text-align: center; padding: 2rem;\">Loading fighters...</div>';\n      } else {\n        // For load more, just show loading in the button\n        loadMoreButton.innerText = 'Loading...';\n        loadMoreButton.disabled = true;\n      }\n\n      try {\n        // Build query params for API request\n        const params = new URLSearchParams();\n\n        // Add pagination params - always 10 per batch, except for last batch\n        params.append(\n          'offset',\n          isLoadMore ? allFighters.length.toString() : '0',\n        );\n\n        const totalFighters = parseInt(totalCountSpan.textContent);\n        const remainingFighters = totalFighters - allFighters.length;\n\n        // Always load 10 fighters per batch, unless less than 10 remain\n        if (isLoadMore && remainingFighters > 0 && remainingFighters < 10) {\n          params.append('limit', remainingFighters.toString());\n        } else {\n          params.append('limit', '10'); // Standard batch size\n        }\n\n        // Add filters\n        if (searchTerm) {\n          params.append('search', searchTerm);\n        }\n\n        if (status) {\n          params.append('status', status);\n        }\n\n        if (isChampion) {\n          params.append('champion', 'true');\n        }\n\n        // Add multi-select filters as array params\n        if (selectedWeightClasses.size > 0) {\n          selectedWeightClasses.forEach(wc => {\n            params.append('weightClass', wc);\n          });\n        }\n\n        if (selectedNationalities.size > 0) {\n          selectedNationalities.forEach(nat => {\n            params.append('nationality', nat);\n          });\n        }\n\n        // Fetch fighters with applied filters\n        const response = await fetch(\\`/api/fighters?\\${params.toString()}\\`);\n\n        if (!response.ok) {\n          throw new Error(\\`Failed to fetch fighters: \\${response.status}\\`);\n        }\n\n        const data = await response.json();\n\n        // Update fighters data\n        if (!isLoadMore) {\n          // Replace all fighters if this is a new filter\n          allFighters = data.fighters || [];\n        } else {\n          // Append fighters if loading more\n          if (data.fighters && data.fighters.length > 0) {\n            allFighters = [...allFighters, ...data.fighters];\n          }\n        }\n\n        // Update count display - this is important to get the total for the current filters\n        totalCountSpan.textContent =\n          data.count !== undefined\n            ? data.count.toString()\n            : totalFightersFromServer.toString();\n\n        // Clear the grid if not loading more\n        if (!isLoadMore) {\n          fightersGrid.innerHTML = '';\n        }\n\n        // Update UI\n        updateFightersDisplay();\n\n        // Update dropdown displays\n        updateDropdownDisplays();\n      } catch (error) {\n        console.error('Error applying filters:', error);\n        // Clear the grid and show error\n        if (!isLoadMore) {\n          fightersGrid.innerHTML = \\`\n            <div class=\"error\" style=\"text-align: center; padding: 2rem; color: #ff4444;\">\n              Error loading fighters. Please try again.\n            </div>\n          \\`;\n        } else {\n          loadMoreButton.innerText = 'Error - Try Again';\n        }\n      } finally {\n        isSearching = false;\n        if (isLoadMore) {\n          loadMoreButton.disabled = false;\n          loadMoreButton.innerText = 'Load More Fighters';\n        }\n      }\n    }\n\n    function updateFilterTags(status, isChampion, search) {\n      // Clear existing tags\n      selectedFiltersPool.innerHTML = '';\n\n      // Add search tag if applicable with title case\n      if (search) {\n        // Convert to title case\n        const titleCased = search\n          .split(' ')\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ');\n\n        addFilterTag('search', search, \\`Search: \\${titleCased}\\`);\n      }\n\n      // Rest of filter tags logic\n      if (status) {\n        addFilterTag('status', status, status);\n      }\n\n      if (isChampion) {\n        addFilterTag('champion', 'champion', 'Champions Only');\n      }\n\n      selectedWeightClasses.forEach(weightClass => {\n        addFilterTag('weight-class', weightClass, weightClass);\n      });\n\n      selectedNationalities.forEach(nationality => {\n        addFilterTag('nationality', nationality, nationality);\n      });\n    }\n\n    // Function to add a filter tag\n    function addFilterTag(type, value, label) {\n      const filterTag = document.createElement('div');\n      filterTag.className = \\`filter-tag \\${type}\\`;\n      filterTag.dataset.value = value;\n      filterTag.innerHTML = \\`\n        \\${label}\n        <span class=\"filter-tag-remove\">\xD7</span>\n      \\`;\n\n      // Add click handler to remove tag\n      filterTag\n        .querySelector('.filter-tag-remove')\n        .addEventListener('click', () => {\n          removeFilter(type, value);\n        });\n\n      selectedFiltersPool.appendChild(filterTag);\n    }\n\n    // Function to remove a filter\n    function removeFilter(type, value) {\n      switch (type) {\n        case 'search':\n          searchInput.value = '';\n          searchTerm = '';\n          clearSearchBtn.style.display = 'none';\n          break;\n        case 'status':\n          statusFilter.value = '';\n          break;\n        case 'champion':\n          championFilter.value = '';\n          break;\n        case 'weight-class':\n          selectedWeightClasses.delete(value);\n          break;\n        case 'nationality':\n          selectedNationalities.delete(value);\n          break;\n      }\n\n      // When removing a filter, reset to first batch\n      visibleCount = 10;\n      allFighters = [];\n      applyFilters();\n    }\n\n    // Helper function to update dropdown display text\n    function updateDropdownText(dropdown, value) {\n      if (!dropdown) return;\n\n      const selectedDisplay = dropdown.querySelector('.filter-selected span');\n      const menuItems = dropdown.querySelectorAll('.filter-item');\n\n      // Reset active state on all items\n      menuItems.forEach(item => {\n        item.classList.remove('active');\n\n        if (item.getAttribute('data-value') === value) {\n          // Update text display and set this item as active\n          selectedDisplay.textContent = item.textContent;\n          item.classList.add('active');\n        }\n      });\n\n      // If no value selected, set to \"All\"\n      if (!value) {\n        const defaultItem = dropdown.querySelector(\n          '.filter-item[data-value=\"\"]',\n        );\n        if (defaultItem) {\n          selectedDisplay.textContent = defaultItem.textContent;\n          defaultItem.classList.add('active');\n        }\n      }\n    }\n\n    // Update all dropdown displays\n    function updateDropdownDisplays() {\n      const statusDropdown = document.getElementById('status-filter-dropdown');\n      const championDropdown = document.getElementById(\n        'champion-filter-dropdown',\n      );\n      const weightClassDropdown = document.getElementById(\n        'weight-class-filter-dropdown',\n      );\n      const nationalityDropdown = document.getElementById(\n        'nationality-filter-dropdown',\n      );\n\n      // Update the selected text for each dropdown\n      updateDropdownText(statusDropdown, statusFilter.value);\n      updateDropdownText(championDropdown, championFilter.value);\n\n      // Update multi-select dropdown text\n      if (weightClassDropdown) {\n        const display = weightClassDropdown.querySelector(\n          '.filter-selected span',\n        );\n        if (selectedWeightClasses.size === 0) {\n          display.textContent = 'All';\n        } else {\n          display.textContent = \\`\\${selectedWeightClasses.size} selected\\`;\n        }\n      }\n\n      if (nationalityDropdown) {\n        const display = nationalityDropdown.querySelector(\n          '.filter-selected span',\n        );\n        if (selectedNationalities.size === 0) {\n          display.textContent = 'All';\n        } else {\n          display.textContent = \\`\\${selectedNationalities.size} selected\\`;\n        }\n      }\n    }\n\n    function updateFightersDisplay() {\n      fightersGrid.innerHTML = '';\n\n      if (allFighters.length === 0) {\n        noResultsDiv.style.display = 'block';\n        loadMoreButton.style.display = 'none';\n        return;\n      }\n\n      noResultsDiv.style.display = 'none';\n\n      allFighters.forEach(fighter => {\n        const fighterCard = document.createElement('a');\n        fighterCard.href = \\`/fighters/\\${fighter.id}\\`;\n        fighterCard.className = 'fighter-card';\n        fighterCard.dataset.weightClass = fighter.weight_class || '';\n        fighterCard.dataset.nationality = fighter.nationality || '';\n        fighterCard.dataset.status = fighter.status || '';\n        fighterCard.dataset.rank = fighter.rank || '';\n\n        const wins = fighter.wins || 0;\n        const losses = fighter.losses || 0;\n        const draws = fighter.draws || 0;\n        const noContests = fighter.no_contests || 0;\n\n        let statusBadgeHTML = '';\n        if (fighter.rank === 'Champion') {\n          statusBadgeHTML = '<span class=\"champion-badge\">Champion</span>';\n        } else if (fighter.status === 'Active') {\n          statusBadgeHTML = '<span class=\"active-badge\">Active</span>';\n        } else if (\n          fighter.status === 'Retired' ||\n          fighter.status === 'Not Fighting'\n        ) {\n          statusBadgeHTML = '<span class=\"retired-badge\">Retired</span>';\n        }\n\n        fighterCard.innerHTML = \\`\n          <div class=\"fighter-header\">\n            <h2>\\${fighter.name}</h2>\n            \\${statusBadgeHTML}\n          </div>\n          <div class=\"fighter-details\">\n            \\${fighter.weight_class ? \\`<p class=\"fighter-weight-class\">\\${fighter.weight_class}</p>\\` : ''}\n            <div class=\"fighter-record\">\n              <span class=\"record-value\">\\${wins}-\\${losses}-\\${draws}</span>\n              <span class=\"record-label\">W-L-D</span>\n              <span class=\"record-nc\">\\${noContests} NC</span>\n            </div>\n            \\${\n              fighter.status !== 'Retired' &&\n              fighter.rank &&\n              fighter.rank !== 'Champion'\n                ? fighter.rank === 'Unranked'\n                  ? \\`<div class=\"fighter-rank\"></div>\\`\n                  : \\`<div class=\"fighter-rank\">Rank: \\${fighter.rank}</div>\\`\n                : ''\n            }\n            \\${\n              fighter.nationality\n                ? \\`<p class=\"fighter-nationality\">\\${fighter.nationality}</p>\\`\n                : ''\n            }\n          </div>\n        \\`;\n\n        fightersGrid.appendChild(fighterCard);\n      });\n\n      shownCountSpan.textContent = allFighters.length.toString();\n\n      const isFiltered =\n        searchTerm ||\n        statusFilter.value ||\n        championFilter.value ||\n        selectedWeightClasses.size > 0 ||\n        selectedNationalities.size > 0;\n\n      filteredTextSpan.style.display = isFiltered ? 'inline' : 'none';\n\n      const totalFighters = parseInt(totalCountSpan.textContent);\n      const hasMoreToLoad = allFighters.length < totalFighters;\n\n      loadMoreButton.style.display = hasMoreToLoad ? 'block' : 'none';\n      loadMoreButton.disabled = false;\n      loadMoreButton.innerText = 'Load More Fighters';\n    }\n\n    if (loadMoreButton) {\n      loadMoreButton.addEventListener('click', async () => {\n        applyFilters(true);\n      });\n    }\n\n    if (statusFilter) {\n      statusFilter.addEventListener('change', function () {\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    if (championFilter) {\n      championFilter.addEventListener('change', function () {\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    if (resetFiltersButton) {\n      resetFiltersButton.addEventListener('click', () => {\n        searchInput.value = '';\n        searchTerm = '';\n        clearSearchBtn.style.display = 'none';\n\n        statusFilter.value = '';\n        championFilter.value = '';\n\n        selectedNationalities.clear();\n        selectedWeightClasses.clear();\n\n        selectedFiltersPool.innerHTML = '';\n\n        visibleCount = 10;\n        allFighters = [];\n        applyFilters();\n      });\n    }\n\n    document.querySelectorAll('.filter-dropdown').forEach(dropdown => {\n      const type = dropdown.id.replace('-filter-dropdown', '');\n      const select = document.getElementById(\\`\\${type}-filter\\`);\n\n      if (select) {\n        dropdown.querySelectorAll('.filter-item').forEach(item => {\n          item.addEventListener('click', function () {\n            const value = this.getAttribute('data-value');\n\n            if (type === 'nationality') {\n              if (value === '') {\n                selectedNationalities.clear();\n              } else {\n                if (selectedNationalities.has(value)) {\n                  selectedNationalities.delete(value);\n                } else {\n                  selectedNationalities.add(value);\n                }\n              }\n              this.classList.toggle('active', selectedNationalities.has(value));\n            } else if (type === 'weight-class') {\n              if (value === '') {\n                selectedWeightClasses.clear();\n              } else {\n                if (selectedWeightClasses.has(value)) {\n                  selectedWeightClasses.delete(value);\n                } else {\n                  selectedWeightClasses.add(value);\n                }\n              }\n              this.classList.toggle('active', selectedWeightClasses.has(value));\n            } else {\n              select.value = value;\n              const event = new Event('change');\n              select.dispatchEvent(event);\n            }\n\n            if (type === 'nationality' || type === 'weight-class') {\n              visibleCount = 10;\n              allFighters = [];\n              applyFilters();\n            }\n          });\n        });\n      }\n    });\n\n    updateFilterTags('', false, '');\n    updateDropdownDisplays();\n  });\n<\/script>"])), renderComponent($$result, "Layout", $$Layout, { "title": "UFC Fighters" }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<main class="fighters-page"> <section class="fighters-container"> <h1>UFC Fighters</h1> <div class="filters-section"> <div class="search-container"> <input type="text" id="fighter-search" class="search-input" placeholder="Search fighter name..." autocomplete="off"> <button id="clear-search" class="clear-search-button" style="display: none;">×</button> </div> <div class="filters-container"> <!-- Hidden original selects for JS compatibility --> <select id="status-filter" class="filter-select hidden-select"> <option value="">All Statuses</option> <option value="Active">Active</option> <option value="Retired">Retired</option> </select> <select id="champion-filter" class="filter-select hidden-select"> <option value="">All Fighters</option> <option value="champion">Champions Only</option> </select> <select id="weight-class-filter" class="filter-select hidden-select"> <option value="">All Weight Classes</option> ${weightClasses.map((weightClass) => renderTemplate`<option${addAttribute(weightClass || "", "value")}> ${weightClass || "Unknown"} </option>`)} </select> <select id="nationality-filter" class="filter-select hidden-select"> <option value="">All Nationalities</option> ${nationalities.map((nationality) => renderTemplate`<option${addAttribute(nationality || "", "value")}> ${nationality || "Unknown"} </option>`)} </select> <!-- Custom filter dropdowns --> <div class="custom-filters"> ${renderComponent($$result2, "FilterDropdown", $$FilterDropdown, { "label": "Status", "options": statusOptions, "currentValue": "", "id": "status-filter" })} ${renderComponent($$result2, "FilterDropdown", $$FilterDropdown, { "label": "Champion", "options": championOptions, "currentValue": "", "id": "champion-filter" })} ${renderComponent($$result2, "FilterDropdown", $$FilterDropdown, { "label": "Weight Class", "options": weightClassOptions, "currentValue": "", "id": "weight-class-filter" })} ${renderComponent($$result2, "FilterDropdown", $$FilterDropdown, { "label": "Nationality", "options": nationalityOptions, "currentValue": "", "id": "nationality-filter" })} <button id="reset-filters" class="reset-button">Reset Filters</button> </div> </div> </div> <!-- Added: Selected filters pool --> <div id="selected-filters-pool" class="selected-filters-pool"></div> <div class="fighters-grid" id="fighters-grid"> ${fightersList.slice(0, initialVisible).map((fighter) => renderTemplate`<a${addAttribute(`/fighters/${fighter.id}`, "href")} class="fighter-card"${addAttribute(fighter.weight_class || "", "data-weight-class")}${addAttribute(fighter.nationality || "", "data-nationality")}${addAttribute(fighter.status || "", "data-status")}${addAttribute(fighter.rank || "", "data-rank")}> <div class="fighter-header"> <h2>${fighter.name}</h2> ${fighter.rank === "Champion" ? renderTemplate`<span class="champion-badge">Champion</span>` : fighter.status === "Active" ? renderTemplate`<span class="active-badge">Active</span>` : fighter.status === "Retired" || fighter.status === "Not Fighting" ? renderTemplate`<span class="retired-badge">Retired</span>` : null} </div> <div class="fighter-details"> ${fighter.weight_class && renderTemplate`<p class="fighter-weight-class">${fighter.weight_class}</p>`} <div class="fighter-record"> <span class="record-value"> ${fighter.wins || 0}-${fighter.losses || 0}-${fighter.draws || 0} </span> <span class="record-label">W-L-D</span> <span class="record-nc">${fighter.no_contests || 0} NC</span> </div> ${fighter.rank && fighter.rank !== "NR" && fighter.rank !== "Unranked" && renderTemplate`<div class="fighter-rank">Rank: ${fighter.rank}</div>`} ${fighter.nationality && renderTemplate`<p class="fighter-nationality">${fighter.nationality}</p>`} </div> </a>`)} </div> <div id="no-results" class="no-results" style="display: none;"> <p>
No fighters match your current filters. Try adjusting your criteria.
</p> </div> <div class="load-more-container"> <button id="load-more" class="load-more-button"${addAttribute(initialVisible, "data-current-count")}>
Load More Fighters
</button> <p class="fighters-count">
Showing <span id="shown-count">${Math.min(initialVisible, fightersList.length)}</span> of <span id="total-count">${totalFighters}</span> fighters
<span id="filtered-text" style="display: none;"> (filtered)</span> </p> </div> <div id="fighters-data" style="display: none;">${fightersData}</div> </section> </main> ` }));
}, "C:/Users/richa/OneDrive/Desktop/MMA-Scheduler/frontend/src/pages/fighters/index.astro", void 0);

const $$file = "C:/Users/richa/OneDrive/Desktop/MMA-Scheduler/frontend/src/pages/fighters/index.astro";
const $$url = "/fighters";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Index,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
