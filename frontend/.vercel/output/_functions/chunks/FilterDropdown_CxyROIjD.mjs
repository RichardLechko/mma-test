import { c as createComponent, a as createAstro, r as renderTemplate, d as defineScriptVars, b as addAttribute, m as maybeRenderHead } from './astro/server_C_1jQ3jI.mjs';
import 'kleur/colors';
import 'clsx';
/* empty css                          */

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$FilterDropdown = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$FilterDropdown;
  const { label, options, currentValue, id } = Astro2.props;
  const displayText = currentValue ? options.find((opt) => opt.value === currentValue)?.label || "All" : "All";
  return renderTemplate(_a || (_a = __template(["", '<div class="filter-dropdown"', ' data-astro-cid-oapft5yq> <div class="filter-dropdown-header" data-astro-cid-oapft5yq> <span class="filter-label" data-astro-cid-oapft5yq>', ':</span> <div class="filter-selected"', " data-astro-cid-oapft5yq> <span data-astro-cid-oapft5yq>", '</span> <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-astro-cid-oapft5yq> <polyline points="6 9 12 15 18 9" data-astro-cid-oapft5yq></polyline> </svg> </div> </div> <div class="filter-menu"', " data-astro-cid-oapft5yq> ", " </div> </div>  <script>(function(){", "\n  // Initialize the dropdown when the component is mounted\n  document.addEventListener('DOMContentLoaded', () => {\n    const dropdown = document.getElementById(`${id}-dropdown`);\n    const selected = document.getElementById(`${id}-selected`);\n    const menu = document.getElementById(`${id}-menu`);\n    const items = menu.querySelectorAll('.filter-item');\n    const selectElement = document.getElementById(id);\n    \n    // Toggle dropdown when clicking the selected option\n    if (selected && dropdown) {\n      selected.addEventListener('click', (e) => {\n        e.stopPropagation();\n        dropdown.classList.toggle('active');\n      });\n      \n      // Close dropdown when clicking outside\n      document.addEventListener('click', (e) => {\n        if (!(e.target instanceof Node) || !dropdown.contains(e.target)) {\n          dropdown.classList.remove('active');\n        }\n      });\n      \n      // Close dropdown when pressing escape\n      document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape') {\n          dropdown.classList.remove('active');\n        }\n      });\n    }\n    \n    // Handle filter item selection\n    items.forEach(item => {\n      item.addEventListener('click', () => {\n        const value = item.getAttribute('data-value');\n        // Use the simplified display text for the selected item\n        const displayText = item.getAttribute('data-display') || item.textContent;\n        \n        // Update the visual selected state\n        items.forEach(i => i.classList.remove('active'));\n        item.classList.add('active');\n        \n        // Update the displayed text (simplified for \"All\" options)\n        selected.querySelector('span').textContent = displayText;\n        \n        // Update the underlying select element\n        if (selectElement) {\n          selectElement.value = value;\n          \n          // Trigger a change event\n          const event = new Event('change', { bubbles: true });\n          selectElement.dispatchEvent(event);\n        }\n        \n        // Close the dropdown\n        dropdown.classList.remove('active');\n      });\n    });\n  });\n})();<\/script>"], ["", '<div class="filter-dropdown"', ' data-astro-cid-oapft5yq> <div class="filter-dropdown-header" data-astro-cid-oapft5yq> <span class="filter-label" data-astro-cid-oapft5yq>', ':</span> <div class="filter-selected"', " data-astro-cid-oapft5yq> <span data-astro-cid-oapft5yq>", '</span> <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-astro-cid-oapft5yq> <polyline points="6 9 12 15 18 9" data-astro-cid-oapft5yq></polyline> </svg> </div> </div> <div class="filter-menu"', " data-astro-cid-oapft5yq> ", " </div> </div>  <script>(function(){", "\n  // Initialize the dropdown when the component is mounted\n  document.addEventListener('DOMContentLoaded', () => {\n    const dropdown = document.getElementById(\\`\\${id}-dropdown\\`);\n    const selected = document.getElementById(\\`\\${id}-selected\\`);\n    const menu = document.getElementById(\\`\\${id}-menu\\`);\n    const items = menu.querySelectorAll('.filter-item');\n    const selectElement = document.getElementById(id);\n    \n    // Toggle dropdown when clicking the selected option\n    if (selected && dropdown) {\n      selected.addEventListener('click', (e) => {\n        e.stopPropagation();\n        dropdown.classList.toggle('active');\n      });\n      \n      // Close dropdown when clicking outside\n      document.addEventListener('click', (e) => {\n        if (!(e.target instanceof Node) || !dropdown.contains(e.target)) {\n          dropdown.classList.remove('active');\n        }\n      });\n      \n      // Close dropdown when pressing escape\n      document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape') {\n          dropdown.classList.remove('active');\n        }\n      });\n    }\n    \n    // Handle filter item selection\n    items.forEach(item => {\n      item.addEventListener('click', () => {\n        const value = item.getAttribute('data-value');\n        // Use the simplified display text for the selected item\n        const displayText = item.getAttribute('data-display') || item.textContent;\n        \n        // Update the visual selected state\n        items.forEach(i => i.classList.remove('active'));\n        item.classList.add('active');\n        \n        // Update the displayed text (simplified for \"All\" options)\n        selected.querySelector('span').textContent = displayText;\n        \n        // Update the underlying select element\n        if (selectElement) {\n          selectElement.value = value;\n          \n          // Trigger a change event\n          const event = new Event('change', { bubbles: true });\n          selectElement.dispatchEvent(event);\n        }\n        \n        // Close the dropdown\n        dropdown.classList.remove('active');\n      });\n    });\n  });\n})();<\/script>"])), maybeRenderHead(), addAttribute(`${id}-dropdown`, "id"), label, addAttribute(`${id}-selected`, "id"), displayText, addAttribute(`${id}-menu`, "id"), options.map((option) => renderTemplate`<div${addAttribute(`filter-item ${option.value === currentValue ? "active" : ""}`, "class")}${addAttribute(option.value, "data-value")}${addAttribute(option.value === "" ? "All" : option.label, "data-display")} data-astro-cid-oapft5yq> ${option.label} </div>`), defineScriptVars({ id }));
}, "C:/Users/richa/OneDrive/Desktop/MMA-Scheduler/frontend/src/components/FilterDropdown.astro", void 0);

export { $$FilterDropdown as $ };
