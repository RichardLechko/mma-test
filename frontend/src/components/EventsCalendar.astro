---
interface Event {
  id: string;
  name: string;
  event_date: string;
  venue: string | null;
  city: string | null;
  country: string | null;
  status: string;
}

interface Props {
  events: Event[];
  currentYear: number;
}

const { events, currentYear } = Astro.props;

const eventsByDate = new Map<string, Event[]>();

events.forEach(event => {
  if (!event?.event_date) return;

  const eventDate = new Date(event.event_date);
  if (isNaN(eventDate.getTime())) return;

  const dateKey = `${eventDate.getFullYear()}-${eventDate.getMonth()}-${eventDate.getDate()}`;

  if (!eventsByDate.has(dateKey)) {
    eventsByDate.set(dateKey, []);
  }

  eventsByDate.get(dateKey)?.push(event);
});

const getDaysInMonth = (year: number, month: number): number => {
  return new Date(year, month + 1, 0).getDate();
};

const getFirstDayOfMonth = (year: number, month: number): number => {
  return new Date(year, month, 1).getDay();
};

type CalendarDay = {
  day: number | null;
  events: Event[];
  hasEvents?: boolean;
};

type CalendarMonth = {
  month: number;
  days: CalendarDay[];
};

const calendarData: CalendarMonth[] = [];

for (let month = 0; month < 12; month++) {
  const daysInMonth = getDaysInMonth(currentYear, month);
  const firstDay = getFirstDayOfMonth(currentYear, month);

  const days: CalendarDay[] = [];

  for (let i = 0; i < firstDay; i++) {
    days.push({ day: null, events: [] });
  }

  for (let day = 1; day <= daysInMonth; day++) {
    const dateKey = `${currentYear}-${month}-${day}`;
    const dayEvents = eventsByDate.get(dateKey) || [];

    days.push({
      day,
      events: dayEvents,
      hasEvents: dayEvents.length > 0,
    });
  }

  calendarData.push({
    month,
    days,
  });
}

const monthNames = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
];

const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

const formatEventDate = (dateString: string): string => {
  const date = new Date(dateString);
  const hours = date.getHours();
  const minutes = date.getMinutes();

  const ampm = hours >= 12 ? 'PM' : 'AM';
  const formattedHours = hours % 12 || 12;
  const formattedMinutes = minutes.toString().padStart(2, '0');

  return `${formattedHours}:${formattedMinutes} ${ampm}`;
};

const today = new Date();
const currentDay = today.getDate();
const currentMonth = today.getMonth();
---

<div class="events-calendar">
  <div class="calendar-months">
    {
      calendarData.map((monthData, index) => (
        <div
          class={`calendar-month ${currentMonth === index ? 'current-month' : ''}`}
          id={`month-${index}`}
        >
          <h3 class="month-title">
            {monthNames[monthData.month]} {currentYear}
          </h3>

          <div class="calendar-grid">
            {dayNames.map(name => (
              <div class="day-name">{name}</div>
            ))}

            {monthData.days.map(dayData =>
              dayData.day ? (
                dayData.hasEvents ? (
                  <a
                    href={`/events/event/${dayData.events[0].id}`}
                    class={`calendar-day ${
                      currentMonth === monthData.month &&
                      currentDay === dayData.day
                        ? 'today'
                        : ''
                    } has-events`}
                  >
                    <span class="day-number">{dayData.day}</span>

                    <div class="day-events">
                      {dayData.events.map(event => (
                        <div class="calendar-event">
                          <span class="event-time">
                            {formatEventDate(event.event_date)}
                          </span>
                          <span class="event-name">{event.name}</span>
                        </div>
                      ))}
                    </div>
                  </a>
                ) : (
                  <div
                    class={`calendar-day ${
                      currentMonth === monthData.month &&
                      currentDay === dayData.day
                        ? 'today'
                        : ''
                    }`}
                  >
                    <span class="day-number">{dayData.day}</span>
                  </div>
                )
              ) : (
                <div class="calendar-day empty" />
              ),
            )}
          </div>
        </div>
      ))
    }
  </div>

  <div class="calendar-navigation">
    <div class="month-selector">
      <label for="month-select">Jump to month:</label>
      <select id="month-select">
        {
          monthNames.map((name, index) => (
            <option value={index} selected={currentMonth === index}>
              {name}
            </option>
          ))
        }
      </select>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const pathParts = window.location.pathname.split('/');
    const yearParam = pathParts[pathParts.length - 1] || '';
    const selectedYear = parseInt(yearParam) || 0;
    const currentYear = new Date().getFullYear();

    if (selectedYear === currentYear) {
      const currentMonth = new Date().getMonth();
      const currentMonthElement = document.getElementById(
        `month-${currentMonth}`,
      );

      if (currentMonthElement) {
        currentMonthElement.scrollIntoView({ behavior: 'smooth' });
      }
    } else {
      const firstMonth = document.querySelector('.calendar-month');
      if (firstMonth) {
        firstMonth.scrollIntoView({ behavior: 'smooth' });
      }
    }

    const monthSelect = document.getElementById(
      'month-select',
    ) as HTMLSelectElement;

    if (monthSelect) {
      monthSelect.addEventListener('change', () => {
        const selectedMonth = monthSelect.value;
        const monthElement = document.getElementById(`month-${selectedMonth}`);

        if (monthElement) {
          monthElement.scrollIntoView({ behavior: 'smooth' });
        }
      });
    }

    enhanceCalendarDays();
  });

  function enhanceCalendarDays() {
    const calendarDays = document.querySelectorAll('.calendar-day');
    if (!calendarDays.length) return;

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    calendarDays.forEach(day => {
      if (day.classList.contains('empty')) return;

      const dayNumberElement = day.querySelector('.day-number');
      if (!dayNumberElement || !dayNumberElement.textContent) return;

      const dayNumber = parseInt(dayNumberElement.textContent);
      if (isNaN(dayNumber)) return;

      const monthElement = day.closest('.calendar-month');
      if (!monthElement) return;

      const monthTitleElement = monthElement.querySelector('.month-title');
      if (!monthTitleElement || !monthTitleElement.textContent) return;

      const monthTitle = monthTitleElement.textContent;
      const monthMatch = monthTitle.match(/([A-Za-z]+)\s+(\d{4})/);
      if (!monthMatch) return;

      const monthName = monthMatch[1];
      const year = parseInt(monthMatch[2]);
      const monthIndex = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
      ].indexOf(monthName);

      if (monthIndex === -1 || isNaN(year)) return;

      const calendarDate = new Date(year, monthIndex, dayNumber);
      calendarDate.setHours(0, 0, 0, 0);

      const timeDifference = calendarDate.getTime() - today.getTime();
      const daysDifference = Math.round(timeDifference / (1000 * 60 * 60 * 24));

      if (daysDifference === 1) {
        day.classList.add('future-1day');
      } else if (daysDifference > 1 && daysDifference <= 3) {
        day.classList.add('future-3days');
      } else if (daysDifference > 3 && daysDifference <= 7) {
        day.classList.add('future-7days');
      }

      if (day.classList.contains('has-events')) {
        if (daysDifference > 0) {
          day.setAttribute('title', `Event in ${daysDifference} days`);
        } else if (daysDifference === 0) {
          day.setAttribute('title', 'Event today!');
        } else {
          day.setAttribute(
            'title',
            `Event was ${Math.abs(daysDifference)} days ago`,
          );
        }
      }
    });
  }
</script>
