---
interface Props {
  title: string;
  date?: string;
  time?: string;
  venue?: string;
  customClass?: string;
}
const { title, date, time, venue, customClass = '' } = Astro.props;
const shareText = [title, date, time, venue].filter(Boolean).join(' - ');
---
<button
  class={`share-button ${customClass}`}
  data-share-text={shareText}
  data-original-text="Share"
  aria-label="Share this event"
>
  Share
</button>

<script>
  const buttonTimeouts = new Map<HTMLElement, number>();
  
  function initializeShareButtons() {
    const shareButtons = document.querySelectorAll('.share-button');
    
    shareButtons.forEach((buttonElement) => {
      if (!(buttonElement as any)._hasShareListener) {
        const button = buttonElement as HTMLElement;
        
        button.addEventListener('click', (e: Event) => {
          handleShareButtonClick(e, button);
        });
        
        (button as any)._hasShareListener = true;
      }
    });
  }

  async function handleShareButtonClick(e: Event, button: HTMLElement) {
    e.preventDefault();
    e.stopPropagation();
    
    try {
      const shareText = button.getAttribute('data-share-text') || 'UFC Event';
      
      const parentAnchor = button.closest('a');
      const url = parentAnchor ? parentAnchor.href : window.location.href;
      
      const shareData = {
        title: shareText.split(' - ')[0] || 'UFC Event',
        text: shareText,
        url: url,
      };
      
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        const input = document.createElement('input');
        input.value = url;
        document.body.appendChild(input);
        input.select();
        document.execCommand('copy');
        document.body.removeChild(input);
        
        const existingTimeout = buttonTimeouts.get(button);
        if (existingTimeout) {
          window.clearTimeout(existingTimeout);
          buttonTimeouts.delete(button);
        }
        
        const originalText = button.getAttribute('data-original-text') || button.textContent;
        button.setAttribute('data-original-text', originalText || 'Share');
        
        button.textContent = 'Copied!';
        button.classList.add('success');
        
        const timeoutId = window.setTimeout(() => {
          button.textContent = button.getAttribute('data-original-text') || 'Share';
          button.classList.remove('success');
          buttonTimeouts.delete(button);
        }, 2000);
        
        buttonTimeouts.set(button, timeoutId);
      }
    } catch (error) {
      console.error('Error sharing:', error);
    }
  }

  document.addEventListener('DOMContentLoaded', initializeShareButtons);
  
  (window as any).initializeShareButtons = initializeShareButtons;
</script>