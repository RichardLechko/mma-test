---
import Layout from '../../layouts/Layout.astro';
import FilterDropdown from '../../components/FilterDropdown.astro';
import EventsCalendar from '../../components/EventsCalendar.astro';
import ShareButton from '../../components/ShareButton.astro';

const { year: yearParam } = Astro.params;
const yearNum = parseInt(yearParam || new Date().getFullYear().toString());

const currentYear = new Date().getFullYear();
const validYear = !isNaN(yearNum) ? yearNum : currentYear;
const isHistoricalYear = validYear < currentYear;

const availableYears = ['2020', '2021', '2022', '2023', '2024', '2025'];

const yearOptions = availableYears.map(year => ({
  value: year,
  label: year,
}));

// Dummy events data for demonstration
const allYearEvents = [
  {
    id: "1",
    name: "UFC 300",
    event_date: "2024-04-13T22:00:00.000Z",
    venue: "T-Mobile Arena",
    city: "Las Vegas",
    country: "USA",
    status: "completed"
  },
  {
    id: "2",
    name: "UFC 301",
    event_date: "2024-05-04T22:00:00.000Z",
    venue: "Rio Arena",
    city: "Rio de Janeiro",
    country: "Brazil",
    status: "completed"
  },
  {
    id: "3",
    name: "UFC Fight Night",
    event_date: "2024-05-11T19:00:00.000Z",
    venue: "Enterprise Center",
    city: "St. Louis",
    country: "USA",
    status: "completed"
  },
  {
    id: "4",
    name: "UFC Fight Night",
    event_date: "2024-05-18T19:00:00.000Z",
    venue: "UFC Apex",
    city: "Las Vegas",
    country: "USA",
    status: "completed"
  },
  {
    id: "5",
    name: "UFC 302",
    event_date: "2024-06-01T22:00:00.000Z",
    venue: "Prudential Center",
    city: "Newark",
    country: "USA",
    status: "completed"
  },
  {
    id: "6",
    name: "UFC Fight Night",
    event_date: "2024-06-15T19:00:00.000Z",
    venue: "UFC Apex",
    city: "Las Vegas",
    country: "USA",
    status: "scheduled"
  },
  {
    id: "7",
    name: "UFC 303",
    event_date: "2024-06-29T22:00:00.000Z",
    venue: "T-Mobile Arena",
    city: "Las Vegas",
    country: "USA",
    status: "scheduled"
  },
  {
    id: "8",
    name: "UFC International Fight Week",
    event_date: "2024-07-06T19:00:00.000Z",
    venue: "T-Mobile Arena",
    city: "Las Vegas",
    country: "USA",
    status: "scheduled"
  },
  {
    id: "9",
    name: "UFC 304",
    event_date: "2024-07-27T19:00:00.000Z",
    venue: "Co-op Live",
    city: "Manchester",
    country: "United Kingdom",
    status: "scheduled"
  },
  {
    id: "10",
    name: "UFC Fight Night",
    event_date: "2024-08-17T19:00:00.000Z",
    venue: "TBD",
    city: "TBD",
    country: "TBD",
    status: "scheduled"
  }
];
---

<Layout title={`UFC Events - ${validYear}`}>
  <main class="events-page">
    <section class="events-container">
      <div class="events-header">
        <h1>UFC Events {validYear}</h1>

        <FilterDropdown
          label="Year"
          options={yearOptions}
          currentValue={validYear.toString()}
          id="year-selector"
        />

        <select id="year-selector" class="hidden-select">
          {
            availableYears.map(year => (
              <option value={year} selected={year === validYear.toString()}>
                {year}
              </option>
            ))
          }
        </select>
      </div>

      <div class="view-mode-container">
        <button class="view-mode-button active" id="grid-view-button">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <rect x="3" y="3" width="7" height="7"></rect>
            <rect x="14" y="3" width="7" height="7"></rect>
            <rect x="14" y="14" width="7" height="7"></rect>
            <rect x="3" y="14" width="7" height="7"></rect>
          </svg>
          Grid View
        </button>
        <button class="view-mode-button" id="calendar-view-button">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          Calendar View
        </button>
      </div>

      <div id="calendar-container" class="hidden">
        <EventsCalendar events={allYearEvents || []} currentYear={validYear} />
      </div>

      <div
        id="events-container"
        data-year={validYear}
        data-is-current-year={isHistoricalYear ? 'false' : 'true'}
      >
        <div class="loading-container">
          <div class="loading-spinner"></div>
          <p>Loading events for {validYear}...</p>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const viewModeContainer = document.querySelector('.view-mode-container');

    if (viewModeContainer) {
      const containerRect = viewModeContainer.getBoundingClientRect();
      const initialPosition = containerRect.top + window.scrollY;

      window.addEventListener('scroll', () => {
        if (window.scrollY > initialPosition - 80) {
          viewModeContainer.classList.add('scrolled');
        } else {
          viewModeContainer.classList.remove('scrolled');
        }
      });
    }
  });

  const EVENTS_CACHE_PREFIX = 'mmascheduler-events-';
  const INITIAL_LOAD = 10;

  function createShareButtonHTML(
    title: string,
    date: string,
    time: string,
    venue: string,
    customClass: string = 'event-share-button',
  ): string {
    return `
    <button
      class="share-button ${customClass}"
      data-share-text="${[title, date, time, venue].filter(Boolean).join(' - ')}"
      aria-label="Share this event"
    >
      Share
    </button>
  `;
  }

  interface Event {
    id: string;
    name: string;
    event_date: string;
    venue: string | null;
    city: string | null;
    country: string | null;
  }

  // Dummy event data
  const dummyEvents: Event[] = [
    {
      id: "1",
      name: "UFC 300",
      event_date: "2024-04-13T22:00:00.000Z",
      venue: "T-Mobile Arena",
      city: "Las Vegas",
      country: "USA"
    },
    {
      id: "2",
      name: "UFC 301",
      event_date: "2024-05-04T22:00:00.000Z",
      venue: "Rio Arena",
      city: "Rio de Janeiro",
      country: "Brazil"
    },
    {
      id: "3",
      name: "UFC Fight Night",
      event_date: "2024-05-11T19:00:00.000Z",
      venue: "Enterprise Center",
      city: "St. Louis",
      country: "USA"
    },
    {
      id: "4",
      name: "UFC Fight Night",
      event_date: "2024-05-18T19:00:00.000Z",
      venue: "UFC Apex",
      city: "Las Vegas",
      country: "USA"
    },
    {
      id: "5",
      name: "UFC 302",
      event_date: "2024-06-01T22:00:00.000Z",
      venue: "Prudential Center",
      city: "Newark",
      country: "USA"
    },
    {
      id: "6",
      name: "UFC Fight Night",
      event_date: "2024-06-15T19:00:00.000Z",
      venue: "UFC Apex",
      city: "Las Vegas",
      country: "USA"
    },
    {
      id: "7",
      name: "UFC 303",
      event_date: "2024-06-29T22:00:00.000Z",
      venue: "T-Mobile Arena",
      city: "Las Vegas",
      country: "USA"
    },
    {
      id: "8",
      name: "UFC International Fight Week",
      event_date: "2024-07-06T19:00:00.000Z",
      venue: "T-Mobile Arena",
      city: "Las Vegas",
      country: "USA"
    },
    {
      id: "9",
      name: "UFC 304",
      event_date: "2024-07-27T19:00:00.000Z",
      venue: "Co-op Live",
      city: "Manchester",
      country: "United Kingdom"
    },
    {
      id: "10",
      name: "UFC Fight Night",
      event_date: "2024-08-17T19:00:00.000Z",
      venue: "TBD",
      city: "TBD",
      country: "TBD"
    },
    {
      id: "11",
      name: "UFC 305",
      event_date: "2024-08-24T22:00:00.000Z",
      venue: "RAC Arena",
      city: "Perth",
      country: "Australia"
    },
    {
      id: "12",
      name: "UFC 306",
      event_date: "2024-09-14T22:00:00.000Z",
      venue: "Sphere",
      city: "Las Vegas",
      country: "USA"
    }
  ];

  document.addEventListener('DOMContentLoaded', async () => {
    const container = document.getElementById('events-container');
    if (!container) return;

    const year = parseInt(container.dataset.year || '0');
    const isCurrentYear = container.dataset.isCurrentYear === 'true';

    const yearSelector = document.getElementById('year-selector');
    if (yearSelector) {
      yearSelector.addEventListener('change', e => {
        const target = e.target as HTMLSelectElement;
        window.location.href = `/events/${target.value}`;
      });
    }

    await loadEvents(year, isCurrentYear);
    initializeShareButtons();
  });

  function initializeShareButtons() {
    if ((window as any).initializeShareButtons) {
      (window as any).initializeShareButtons();
      return;
    }

    const shareButtons = document.querySelectorAll('.share-button');

    if (!(window as any).buttonTimeouts) {
      (window as any).buttonTimeouts = new Map();
    }
    const buttonTimeouts = (window as any).buttonTimeouts;

    shareButtons.forEach(button => {
      if (!(button as any)._hasShareListener) {
        button.addEventListener('click', e => {
          e.preventDefault();
          e.stopPropagation();

          try {
            const shareText = button.getAttribute('data-share-text') || 'UFC Event';
            const parentAnchor = button.closest('a');
            const url = parentAnchor ? parentAnchor.href : window.location.href;

            const shareData = {
              title: shareText.split(' - ')[0] || 'UFC Event',
              text: shareText,
              url: url,
            };

            if (navigator.share) {
              navigator
                .share(shareData)
                .catch(err => console.error('Share error:', err));
            } else {
              const input = document.createElement('input');
              input.value = url;
              document.body.appendChild(input);
              input.select();
              document.execCommand('copy');
              document.body.removeChild(input);

              const existingTimeout = buttonTimeouts.get(button);
              if (existingTimeout) {
                window.clearTimeout(existingTimeout);
                buttonTimeouts.delete(button);
              }

              const originalText = button.getAttribute('data-original-text') || button.textContent;
              button.setAttribute('data-original-text', originalText || 'Share');

              button.textContent = 'Copied!';
              button.classList.add('success');

              const timeoutId = window.setTimeout(() => {
                button.textContent = button.getAttribute('data-original-text') || 'Share';
                button.classList.remove('success');
                buttonTimeouts.delete(button);
              }, 2000);

              buttonTimeouts.set(button, timeoutId);
            }
          } catch (error) {
            console.error('Error sharing:', error);
          }
        });

        (button as any)._hasShareListener = true;
      }
    });
  }

  async function loadEvents(year: number, isCurrentYear: boolean) {
    const container = document.getElementById('events-container');
    if (!container) return;

    try {
      // Filter events by year
      const events = dummyEvents.filter(event => {
        const eventDate = new Date(event.event_date);
        return eventDate.getFullYear() === year;
      });
      
      const totalCount = events.length;
      
      renderEvents(events, year, isCurrentYear, totalCount);
    } catch (error) {
      console.error('Error loading events:', error);
      if (container) {
        container.innerHTML = `
          <div class="no-events">
            <p>Error loading events. Please try again later.</p>
          </div>
        `;
      }
    }
  }

  function renderEvents(
    events: Event[],
    year: number,
    isCurrentYear: boolean,
    totalCount: number,
  ) {
    const container = document.getElementById('events-container');
    if (!container) return;

    if (!events || events.length === 0) {
      container.innerHTML = `
        <div class="no-events">
          <p>No events found for ${year}.</p>
        </div>
      `;
      return;
    }

    const today = new Date();
    if (isCurrentYear) {
      events.sort((a: Event, b: Event) => {
        const dateA = new Date(a.event_date);
        const dateB = new Date(b.event_date);

        if (
          (dateA >= today && dateB >= today) ||
          (dateA < today && dateB < today)
        ) {
          return dateA >= today
            ? dateA.getTime() - dateB.getTime()
            : dateB.getTime() - dateA.getTime();
        }

        return dateA >= today ? -1 : 1;
      });
    }

    let html = `<div class="events-grid">`;

    events.forEach((event: Event) => {
      const eventDate = new Date(event.event_date);
      const statusClass = eventDate > today ? 'status-scheduled' : 'status-completed';

      const formattedDate = eventDate.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });

      const formattedTime = eventDate.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        timeZoneName: 'short',
      });

      html += `
  <a href="/events/event/${event.id}" class="event-card ${statusClass}" data-event-date="${event.event_date}">
    <div class="event-header ${statusClass}">
      <h2>${event.name}</h2>
      <span class="event-countdown"></span>
    </div>
    <div class="event-details">
      <p class="event-date"></p>
      <p class="event-location">
        ${
          event.venue
            ? `<span class="venue">${event.venue}</span>
             ${
               event.city && event.country
                 ? `<span class="location">${event.city}, ${event.country}</span>`
                 : ''
             }`
            : `<span class="location-tbd">Location TBD</span>`
        }
      </p>
      <p class="event-status">${eventDate > today ? 'Upcoming' : 'Completed'}</p>
    </div>
    ${createShareButtonHTML(event.name, formattedDate, formattedTime, event.venue || '')}
  </a>
`;
    });

    html += `</div>`;

    if (!isCurrentYear && events.length < totalCount) {
      const loadedCount = events.length;
      html += `
        <div class="load-more-container">
          <button id="load-more-btn" class="load-more-btn" data-year="${year}" data-offset="${loadedCount}" data-total="${totalCount}">
            Load More Events (${loadedCount}/${totalCount})
          </button>
        </div>
      `;
    }

    container.innerHTML = html;
    updateEventDates();
    initializeShareButtons();

    const loadMoreBtn = document.getElementById('load-more-btn');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', loadMoreEvents);
    }
  }

  function updateEventDates() {
    const eventCards = document.querySelectorAll('.event-card');
    const today = new Date();
    const todayAtMidnight = new Date(
      today.getFullYear(),
      today.getMonth(),
      today.getDate(),
    );

    eventCards.forEach(card => {
      const utcDateStr = card.getAttribute('data-event-date');
      if (!utcDateStr) return;

      const localDate = new Date(utcDateStr);

      const formattedDate = localDate.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });

      const formattedTime = localDate.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        timeZoneName: 'short',
      });

      const dateElement = card.querySelector('.event-date');
      if (dateElement) {
        dateElement.textContent = `${formattedDate} at ${formattedTime}`;
      }

      const isPastEvent = localDate < todayAtMidnight;
      const diffDays = calculateDaysDifference(localDate, todayAtMidnight);

      let timeDisplay;
      if (!isPastEvent) {
        if (diffDays === 0) {
          timeDisplay = 'Today';
        } else if (diffDays === 1) {
          timeDisplay = 'Tomorrow';
        } else {
          timeDisplay = `${diffDays} days away`;
        }
      } else {
        if (diffDays === 0) {
          timeDisplay = 'Today';
        } else if (diffDays === 1) {
          timeDisplay = 'Yesterday';
        } else {
          timeDisplay = `${diffDays} days ago`;
        }
      }

      const countdownElement = card.querySelector('.event-countdown');
      if (countdownElement) {
        countdownElement.textContent = timeDisplay;
      }
    });
  }

  function calculateDaysDifference(date1: Date, date2: Date): number {
    const d1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());
    const d2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
    const timeDiff = Math.abs(d2.getTime() - d1.getTime());
    return Math.round(timeDiff / (1000 * 60 * 60 * 24));
  }

  async function loadMoreEvents() {
    const loadMoreBtn = document.getElementById('load-more-btn') as HTMLButtonElement;
    if (!loadMoreBtn) return;

    const year = parseInt(loadMoreBtn.dataset.year || '0');
    const offset = parseInt(loadMoreBtn.dataset.offset || '0');
    const total = parseInt(loadMoreBtn.dataset.total || '0');
    const limit = 10;

    loadMoreBtn.disabled = true;
    loadMoreBtn.innerHTML = 'Loading... <span class="loading"></span>';

    try {
      const moreEvents = dummyEvents
        .filter(event => {
          const eventDate = new Date(event.event_date);
          return eventDate.getFullYear() === year;
        })
        .slice(offset, offset + limit);

      if (moreEvents.length > 0) {
        const eventsGrid = document.querySelector('.events-grid');

        if (eventsGrid) {
          moreEvents.forEach((event: Event) => {
            const today = new Date();
            const eventDate = new Date(event.event_date);
            const statusClass = eventDate > today ? 'status-scheduled' : 'status-completed';

            const formattedDate = eventDate.toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            });

            const formattedTime = eventDate.toLocaleTimeString('en-US', {
              hour: 'numeric',
              minute: '2-digit',
              timeZoneName: 'short',
            });

            const eventCard = document.createElement('a');
            eventCard.href = `/events/event/${event.id}`;
            eventCard.className = `event-card ${statusClass}`;
            eventCard.dataset.eventDate = event.event_date;

            const shareButtonHTML = createShareButtonHTML(
              event.name,
              formattedDate,
              formattedTime,
              event.venue || '',
              'event-share-button',
            );

            eventCard.innerHTML = `
  <div class="event-header ${statusClass}">
    <h2>${event.name}</h2>
    <span class="event-countdown"></span>
  </div>
  <div class="event-details">
    <p class="event-date"></p>
    <p class="event-location">
      ${
        event.venue
          ? `<span class="venue">${event.venue}</span>
           ${
             event.city && event.country
               ? `<span class="location">${event.city}, ${event.country}</span>`
               : ''
           }`
          : `<span class="location-tbd">Location TBD</span>`
      }
    </p>
    <p class="event-status">${eventDate > today ? 'Upcoming' : 'Completed'}</p>
  </div>
  ${shareButtonHTML}
`;

            eventsGrid.appendChild(eventCard);
          });

          updateEventDates();
          initializeShareButtons();

          const newOffset = offset + moreEvents.length;
          const loadedCount = Math.min(newOffset, total);

          loadMoreBtn.dataset.offset = newOffset.toString();
          loadMoreBtn.innerHTML = `Load 10 More Events (${loadedCount}/${total})`;

          if (loadedCount >= total) {
            loadMoreBtn.style.display = 'none';
          }
        }
      } else {
        loadMoreBtn.style.display = 'none';
      }
    } catch (error) {
      console.error('Error loading more events:', error);
      loadMoreBtn.innerHTML = 'Error loading events. Try again.';
    } finally {
      loadMoreBtn.disabled = false;
    }
  }
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const gridViewButton = document.getElementById('grid-view-button');
    const calendarViewButton = document.getElementById('calendar-view-button');
    const eventsContainer = document.getElementById('events-container');
    const calendarContainer = document.getElementById('calendar-container');

    if (
      gridViewButton &&
      calendarViewButton &&
      eventsContainer &&
      calendarContainer
    ) {
      gridViewButton.addEventListener('click', () => {
        gridViewButton.classList.add('active');
        calendarViewButton.classList.remove('active');

        eventsContainer.classList.remove('hidden');
        calendarContainer.classList.add('hidden');

        localStorage.setItem('events-view-mode', 'grid');
      });

      calendarViewButton.addEventListener('click', () => {
        calendarViewButton.classList.add('active');
        gridViewButton.classList.remove('active');

        calendarContainer.classList.remove('hidden');
        eventsContainer.classList.add('hidden');

        const pathParts = window.location.pathname.split('/');
        const yearParam = pathParts[pathParts.length - 1] || '';
        const selectedYear = parseInt(yearParam) || 0;
        const currentYear = new Date().getFullYear();

        if (selectedYear === currentYear) {
          const currentMonth = new Date().getMonth();
          const currentMonthElement = document.getElementById(
            `month-${currentMonth}`,
          );

          if (currentMonthElement) {
            setTimeout(() => {
              currentMonthElement.scrollIntoView({ behavior: 'smooth' });
            }, 100);
          }
        } else {
          const firstMonth = document.querySelector('.calendar-month');
          if (firstMonth) {
            setTimeout(() => {
              firstMonth.scrollIntoView({ behavior: 'smooth' });
            }, 100);
          }
        }

        localStorage.setItem('events-view-mode', 'calendar');
      });

      const viewMode = localStorage.getItem('events-view-mode');

      if (viewMode === 'calendar') {
        calendarViewButton.click();
      } else {
        gridViewButton.click();
      }
    }
  });
</script>

<style>
  .hidden-select {
    display: none;
  }
</style>
