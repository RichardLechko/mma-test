---
import Layout from '../../../layouts/Layout.astro';

interface Event {
  id: string;
  name: string;
  event_date: string;
  venue: string | null;
  city: string | null;
  country: string | null;
  status: string;
  ufc_url: string | null;
  attendance: string | null;
}

interface Fighter {
  id: string;
  name: string;
  nickname: string | null;
  weight_class: string | null;
}

interface Fight {
  id: string;
  event_id: string;
  fighter1_id: string;
  fighter2_id: string;
  fighter1_name: string;
  fighter2_name: string;
  fighter1_rank: string | null;
  fighter2_rank: string | null;
  weight_class: string;
  is_main_event: boolean;
  fighter1_was_champion: boolean;
  fighter2_was_champion: boolean;
  was_title_fight: boolean;
  fight_order: number | null;
  winner_id: string | null;
  result_method: string | null;
  result_method_details: string | null;
  result_round: number | null;
  result_time: string | null;
  fighter1: Fighter;
  fighter2: Fighter;
  winner: Fighter | null;
}

const { id } = Astro.params;
const eventId = id || "1";

// Dummy event data from our events collection
const eventData: Event = {
  id: eventId,
  name: "UFC 300",
  event_date: "2024-04-13T22:00:00.000Z",
  venue: "T-Mobile Arena",
  city: "Las Vegas",
  country: "USA",
  status: "Completed",
  ufc_url: "https://www.ufc.com/event/ufc-300",
  attendance: "20,000"
};

// Dummy fighters data
const fighters: Record<string, Fighter> = {
  "f1": { 
    id: "f1", 
    name: "Alex Pereira", 
    nickname: "Poatan", 
    weight_class: "Light Heavyweight" 
  },
  "f2": { 
    id: "f2", 
    name: "Jamahal Hill", 
    nickname: "Sweet Dreams", 
    weight_class: "Light Heavyweight" 
  },
  "f3": { 
    id: "f3", 
    name: "Zhang Weili", 
    nickname: "Magnum", 
    weight_class: "Women's Strawweight" 
  },
  "f4": { 
    id: "f4", 
    name: "Yan Xiaonan", 
    nickname: "Fury", 
    weight_class: "Women's Strawweight" 
  },
  "f5": { 
    id: "f5", 
    name: "Max Holloway", 
    nickname: "Blessed", 
    weight_class: "Featherweight" 
  },
  "f6": { 
    id: "f6", 
    name: "Justin Gaethje", 
    nickname: "The Highlight", 
    weight_class: "Lightweight" 
  },
  "f7": { 
    id: "f7", 
    name: "Charles Oliveira", 
    nickname: "Do Bronx", 
    weight_class: "Lightweight" 
  },
  "f8": { 
    id: "f8", 
    name: "Arman Tsarukyan", 
    nickname: "Ahalkalakets", 
    weight_class: "Lightweight" 
  }
};

// Dummy fights data
const fightsList: Fight[] = [
  {
    id: "fight1",
    event_id: eventId,
    fighter1_id: "f1",
    fighter2_id: "f2",
    fighter1_name: "Alex Pereira",
    fighter2_name: "Jamahal Hill",
    fighter1_rank: "Champion",
    fighter2_rank: "1",
    weight_class: "Light Heavyweight",
    is_main_event: true,
    fighter1_was_champion: true,
    fighter2_was_champion: false,
    was_title_fight: true,
    fight_order: 1,
    winner_id: "f1",
    result_method: "KO/TKO",
    result_method_details: "Punches",
    result_round: 1,
    result_time: "03:14",
    fighter1: fighters.f1,
    fighter2: fighters.f2,
    winner: fighters.f1
  },
  {
    id: "fight2",
    event_id: eventId,
    fighter1_id: "f3",
    fighter2_id: "f4",
    fighter1_name: "Zhang Weili",
    fighter2_name: "Yan Xiaonan",
    fighter1_rank: "Champion",
    fighter2_rank: "1",
    weight_class: "Women's Strawweight",
    is_main_event: false,
    fighter1_was_champion: true,
    fighter2_was_champion: false,
    was_title_fight: true,
    fight_order: 2,
    winner_id: "f3",
    result_method: "Decision",
    result_method_details: "Unanimous",
    result_round: 5,
    result_time: "25:00",
    fighter1: fighters.f3,
    fighter2: fighters.f4,
    winner: fighters.f3
  },
  {
    id: "fight3",
    event_id: eventId,
    fighter1_id: "f5",
    fighter2_id: "f6",
    fighter1_name: "Max Holloway",
    fighter2_name: "Justin Gaethje",
    fighter1_rank: "1",
    fighter2_rank: "2",
    weight_class: "Lightweight",
    is_main_event: false,
    fighter1_was_champion: false,
    fighter2_was_champion: false,
    was_title_fight: false,
    fight_order: 3,
    winner_id: "f5",
    result_method: "KO/TKO",
    result_method_details: "Punches",
    result_round: 5,
    result_time: "4:59",
    fighter1: fighters.f5,
    fighter2: fighters.f6,
    winner: fighters.f5
  },
  {
    id: "fight4",
    event_id: eventId,
    fighter1_id: "f7",
    fighter2_id: "f8",
    fighter1_name: "Charles Oliveira",
    fighter2_name: "Arman Tsarukyan",
    fighter1_rank: "1",
    fighter2_rank: "4",
    weight_class: "Lightweight",
    is_main_event: false,
    fighter1_was_champion: false,
    fighter2_was_champion: false,
    was_title_fight: false,
    fight_order: 4,
    winner_id: "f8",
    result_method: "Decision",
    result_method_details: "Split",
    result_round: 3,
    result_time: "15:00",
    fighter1: fighters.f7,
    fighter2: fighters.f8,
    winner: fighters.f8
  }
];

const isEventCompleted = eventData?.status === 'Completed';

const isFightCanceled = (fight: Fight, isCompleted: boolean) => {
  return (
    isCompleted &&
    !fight.winner_id &&
    !fight.result_method &&
    fight.result_method !== 'Draw' &&
    fight.result_method !== 'No Contest'
  );
};
---

<Layout title={eventData ? eventData.name : 'Event Details'}>
  <main class="event-page">
    {
      eventData ? (
        <div class="event-details-container">
          <div class="event-header">
            <h1>{eventData.name}</h1>

            <a
              href={eventData.ufc_url}
              target="_blank"
              rel="noopener noreferrer"
              class="ufc-link"
            >
              <span class="ufc-icon">UFC</span>
              <span class="link-text">Official Page</span>
            </a>

            <div class="event-meta">
              <div class="event-date-time">
                {(() => {
                  const eventDate = new Date(eventData.event_date);

                  if (isNaN(eventDate.getTime())) {
                    return <div>Date not available</div>;
                  }

                  const formattedDate = eventDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  });

                  const formattedTime = eventDate.toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    timeZoneName: 'short',
                  });

                  return (
                    <>
                      <div class="event-date">{formattedDate}</div>
                      <div class="event-time">{formattedTime}</div>
                    </>
                  );
                })()}
              </div>
              <div class="event-location">
                {eventData.venue && (
                  <span class="venue">{eventData.venue}</span>
                )}
                {eventData.city && eventData.country && (
                  <span class="location">
                    {eventData.city}, {eventData.country}
                  </span>
                )}
                {eventData.attendance &&
                  isEventCompleted &&
                  parseInt(String(eventData.attendance).replace(/[^\d]/g, '')) >
                    0 && (
                    <span class="attendance">
                      <span class="attendance-icon">ðŸ‘¥</span>
                      <span class="attendance-count">
                        {(() => {
                          const attendanceStr = String(eventData.attendance);
                          const numericValue = attendanceStr.replace(
                            /[^\d]/g,
                            '',
                          );
                          const formattedAttendance = numericValue
                            ? new Intl.NumberFormat().format(
                                parseInt(numericValue),
                              )
                            : attendanceStr;
                          return `${formattedAttendance} fans`;
                        })()}
                      </span>
                    </span>
                  )}
              </div>
            </div>

            <div class="event-countdown">
              {(() => {
                const eventDate = new Date(eventData.event_date);

                if (isNaN(eventDate.getTime())) {
                  return <div>Date not available</div>;
                }

                const utcYear = eventDate.getUTCFullYear();
                const utcMonth = eventDate.getUTCMonth();
                const utcDay = eventDate.getUTCDate();

                const displayDate = new Date(utcYear, utcMonth, utcDay);

                const today = new Date();
                const todayAtMidnight = new Date(
                  today.getFullYear(),
                  today.getMonth(),
                  today.getDate(),
                );

                const isPastEvent = displayDate < todayAtMidnight;

                const calculateDaysDifference = (
                  date1: Date,
                  date2: Date,
                ): number => {
                  const d1 = new Date(
                    date1.getFullYear(),
                    date1.getMonth(),
                    date1.getDate(),
                  );
                  const d2 = new Date(
                    date2.getFullYear(),
                    date2.getMonth(),
                    date2.getDate(),
                  );

                  const timeDiff = Math.abs(d2.getTime() - d1.getTime());
                  return Math.round(timeDiff / (1000 * 60 * 60 * 24));
                };

                const diffDays = calculateDaysDifference(
                  displayDate,
                  todayAtMidnight,
                );

                let timeDisplay: string;
                if (!isPastEvent) {
                  if (diffDays === 0) {
                    timeDisplay = 'Today';
                  } else if (diffDays === 1) {
                    timeDisplay = 'Tomorrow';
                  } else {
                    timeDisplay = `${diffDays} days until event`;
                  }
                } else {
                  if (diffDays === 0) {
                    timeDisplay = 'Today';
                  } else if (diffDays === 1) {
                    timeDisplay = 'Yesterday';
                  } else {
                    timeDisplay = `${diffDays} days ago`;
                  }
                }

                return (
                  <>
                    <span class="countdown-value">{timeDisplay}</span>
                    <span class="countdown-label">{eventData.status}</span>
                  </>
                );
              })()}
            </div>
          </div>

          <section class="fight-card">
            <h2>Fight Card</h2>

            {fightsList.length > 0 ? (
              <div class="fights-list">
                {fightsList.map(fight => {
                  const isCanceled = isFightCanceled(fight, isEventCompleted);

                  return (
                    <div
                      class={`fight ${fight.is_main_event ? 'main-event' : ''} ${fight.was_title_fight ? 'title-fight' : ''} ${isCanceled ? 'canceled-fight' : ''}`}
                    >
                      <div>
                        {fight.is_main_event && (
                          <span class="main-event-tag">Main Event</span>
                        )}
                        {fight.was_title_fight && (
                          <span class="title-fight-tag">Title Fight</span>
                        )}
                        {isCanceled && (
                          <span class="canceled-tag">Canceled</span>
                        )}

                        <span class="weight-class">
                          {fight.weight_class}
                          {fight.was_title_fight && ' Championship'}
                        </span>
                      </div>

                      <div class="fighters">
                        <a
                          href={`/fighters/${fight.fighter1.id}`}
                          class={`fighter fighter-1 
    ${fight.winner_id === fight.fighter1_id ? 'winner' : ''} 
    ${fight.result_method === 'Draw' ? 'draw' : ''} 
    ${fight.result_method === 'No Contest' ? 'no-contest' : ''} 
    ${isCanceled ? 'canceled' : ''}`}
                        >
                          <div class="fighter-name">
                            <span class="name">{fight.fighter1.name}</span>
                          </div>
                          <div class="fighter-status">
                            {fight.fighter1_was_champion ? (
                              <div class="champion-badge">C</div>
                            ) : fight.fighter1_rank &&
                              fight.fighter1_rank !== 'NR' ? (
                              <div class="fighter-rank">
                                #{fight.fighter1_rank}
                              </div>
                            ) : (
                              (fight.fighter2_was_champion ||
                                (fight.fighter2_rank &&
                                  fight.fighter2_rank !== 'NR')) && (
                                <div class="fighter-unranked">Unranked</div>
                              )
                            )}
                          </div>
                        </a>
                        <div class="vs">VS</div>
                        <a
                          href={`/fighters/${fight.fighter2.id}`}
                          class={`fighter fighter-2 
    ${fight.winner_id === fight.fighter2_id ? 'winner' : ''}
    ${fight.result_method === 'Draw' ? 'draw' : ''} 
    ${fight.result_method === 'No Contest' ? 'no-contest' : ''}
    ${isCanceled ? 'canceled' : ''}`}
                        >
                          <div class="fighter-name">
                            <span class="name">{fight.fighter2.name}</span>
                          </div>
                          <div class="fighter-status">
                            {fight.fighter2_was_champion ? (
                              <div class="champion-badge">C</div>
                            ) : fight.fighter2_rank &&
                              fight.fighter2_rank !== 'NR' ? (
                              <div class="fighter-rank">
                                #{fight.fighter2_rank}
                              </div>
                            ) : (
                              (fight.fighter1_was_champion ||
                                (fight.fighter1_rank &&
                                  fight.fighter1_rank !== 'NR')) && (
                                <div class="fighter-unranked">Unranked</div>
                              )
                            )}
                          </div>
                        </a>
                      </div>

                      {isEventCompleted && (
                        <>
                          {isCanceled ? (
                            <div class="fight-result canceled-result">
                              <div class="result-header">Fight Canceled</div>
                            </div>
                          ) : fight.winner_id ? (
                            <div class="fight-result">
                              <div class="result-header">
                                <span class="winner-name">
                                  {fight.winner?.name}
                                </span>{' '}
                                wins by{' '}
                                <span class="method">
                                  {fight.result_method}
                                  {fight.result_method_details &&
                                    ` (${fight.result_method_details})`}
                                </span>
                              </div>
                              {(fight.result_round || fight.result_time) && (
                                <div class="result-timing">
                                  {fight.result_round &&
                                    `Round ${fight.result_round}`}
                                  {fight.result_round &&
                                    fight.result_time &&
                                    ` â€¢ `}
                                  {fight.result_time &&
                                    (() => {
                                      const timeStr = fight.result_time;
                                      const halfLength = timeStr.length / 2;
                                      const firstHalf = timeStr.substring(
                                        0,
                                        halfLength,
                                      );
                                      const secondHalf =
                                        timeStr.substring(halfLength);
                                      return firstHalf === secondHalf
                                        ? firstHalf
                                        : timeStr;
                                    })()}
                                </div>
                              )}
                            </div>
                          ) : fight.result_method === 'Draw' ? (
                            <div class="fight-result draw-result">
                              <div class="result-header">
                                <span class="method">
                                  {fight.result_method}
                                </span>
                              </div>
                              {(fight.result_round || fight.result_time) && (
                                <div class="result-timing">
                                  {fight.result_round &&
                                    `Round ${fight.result_round}`}
                                  {fight.result_round &&
                                    fight.result_time &&
                                    ` â€¢ `}
                                  {fight.result_time &&
                                    (() => {
                                      const timeStr = fight.result_time;
                                      const halfLength = timeStr.length / 2;
                                      const firstHalf = timeStr.substring(
                                        0,
                                        halfLength,
                                      );
                                      const secondHalf =
                                        timeStr.substring(halfLength);

                                      return firstHalf === secondHalf
                                        ? firstHalf
                                        : timeStr;
                                    })()}
                                </div>
                              )}
                            </div>
                          ) : fight.result_method === 'No Contest' ? (
                            <div class="fight-result no-contest-result">
                              <div class="result-header">
                                <span class="method">
                                  {fight.result_method}
                                </span>
                              </div>
                              {(fight.result_round || fight.result_time) && (
                                <div class="result-timing">
                                  {fight.result_round &&
                                    `Round ${fight.result_round}`}
                                  {fight.result_round &&
                                    fight.result_time &&
                                    ` â€¢ `}
                                  {fight.result_time &&
                                    (() => {
                                      const timeStr = fight.result_time;
                                      const halfLength = timeStr.length / 2;
                                      const firstHalf = timeStr.substring(
                                        0,
                                        halfLength,
                                      );
                                      const secondHalf =
                                        timeStr.substring(halfLength);

                                      return firstHalf === secondHalf
                                        ? firstHalf
                                        : timeStr;
                                    })()}
                                </div>
                              )}
                            </div>
                          ) : null}
                        </>
                      )}
                    </div>
                  );
                })}
              </div>
            ) : (
              <div class="no-fights">
                <p>No fights announced yet for this event.</p>
              </div>
            )}
          </section>
        </div>
      ) : (
        <div class="event-not-found">
          <h1>Event Not Found</h1>
          <p>
            Sorry, the event you're looking for doesn't exist or has been
            removed.
          </p>
          <a href="/events" class="back-button">
            Back to Events
          </a>
        </div>
      )
    }
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const currentUrl = window.location.pathname;
    const eventId = currentUrl.split('/').pop();

    if (eventId) {
      const cacheKey = `event-page-${eventId}`;

      if (window.performance && window.performance.navigation.type !== 1) {
        try {
          sessionStorage.setItem(cacheKey, document.documentElement.outerHTML);
          sessionStorage.setItem(
            `${cacheKey}-timestamp`,
            Date.now().toString(),
          );
        } catch (e) {
          console.warn('Could not cache page:', e);
        }
      }
    }

    const preconnect = document.createElement('link');
    preconnect.rel = 'preconnect';
    preconnect.href = window.location.origin;
    document.head.appendChild(preconnect);

    const prefetch = document.createElement('link');
    prefetch.rel = 'prefetch';
    prefetch.href = '/events';
    document.head.appendChild(prefetch);

    const fighterLinks = document.querySelectorAll('.fighter');
    if (fighterLinks.length > 0) {
      const mainEventLinks = document.querySelectorAll('.main-event .fighter');
      if (mainEventLinks.length > 0) {
        mainEventLinks.forEach(link => {
          if (link instanceof HTMLAnchorElement) {
            const prefetchLink = document.createElement('link');
            prefetchLink.rel = 'prefetch';
            prefetchLink.href = link.href;
            document.head.appendChild(prefetchLink);
          }
        });
      }
    }
  });
</script>
