---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';

interface Fighter {
  id: string;
  name: string;
  nickname?: string;
  weight_class: string;
  rank?: string;
  wins: number;
  losses: number;
  draws: number;
  status?: string;
  nationality?: string;
}

interface FighterRanking {
  id: string;
  fighter_id: string;
  fighter: Fighter;
  weight_class: string;
  rank: string;
}

const weightClasses = [
  "Flyweight",
  "Bantamweight",
  "Featherweight",
  "Lightweight",
  "Welterweight",
  "Middleweight",
  "Light Heavyweight",
  "Heavyweight",
  
  "Women's Strawweight",
  "Women's Flyweight",
  "Women's Bantamweight",
  "Women's Featherweight"
];

const { data: rankings, error: rankingsError } = await supabase
  .from('fighter_rankings')
  .select(`
    id,
    fighter_id,
    weight_class,
    rank,
    fighter:fighter_id (
      id,
      name,
      nickname,
      wins,
      losses,
      draws,
      status,
      nationality
    )
  `);

if (rankingsError) {
  console.error('Error fetching rankings:', rankingsError);
}

const { data: rankedFighters, error: fightersError } = await supabase
  .from('fighters')
  .select('*')
  .not('rank', 'is', null)
  .not('rank', 'eq', 'Unranked')
  .not('rank', 'eq', 'NR');

if (fightersError) {
  console.error('Error fetching fighters:', fightersError);
}

function getRankValue(rank: string): number {
  if (!rank) return 999;
  if (rank === "Champion") return -2;
  if (rank === "Interim Champion") return -1;
  if (rank.startsWith("#")) {
    const rankNum = parseInt(rank.substring(1));
    return isNaN(rankNum) ? 999 : rankNum;
  }
  const rankNum = parseInt(rank);
  return !isNaN(rankNum) ? rankNum : 999;
}

const fightersByWeightClass: Record<string, any[]> = {};

weightClasses.forEach(weightClass => {
  fightersByWeightClass[weightClass] = [];
});

if (rankings) {
  rankings.forEach((ranking: any) => {
    const weightClass = ranking.weight_class;
    const rank = ranking.rank;
    const fighter = ranking.fighter;
    
    if (rank === "Champion" || rank === "Interim Champion" || 
        rank.startsWith("#") || !isNaN(parseInt(rank))) {
      
      if (weightClasses.includes(weightClass) && fighter) {
        fightersByWeightClass[weightClass].push({
          id: fighter.id,
          name: fighter.name,
          nickname: fighter.nickname,
          wins: fighter.wins || 0,
          losses: fighter.losses || 0,
          draws: fighter.draws || 0,
          status: fighter.status,
          nationality: fighter.nationality || "",
          currentRank: rank,
          currentWeightClass: weightClass
        });
      }
    }
  });
}

if (rankedFighters) {
  rankedFighters.forEach((fighter: any) => {
    const hasRankingEntry = rankings?.some(
      ranking => ranking.fighter_id === fighter.id
    );
    
    if (!hasRankingEntry && fighter.rank && fighter.weight_class) {
      const weightClass = fighter.weight_class;
      if (weightClasses.includes(weightClass)) {
        fightersByWeightClass[weightClass].push({
          id: fighter.id,
          name: fighter.name,
          nickname: fighter.nickname,
          wins: fighter.wins || 0,
          losses: fighter.losses || 0, 
          draws: fighter.draws || 0,
          status: fighter.status,
          nationality: fighter.nationality || "",
          currentRank: fighter.rank,
          currentWeightClass: weightClass
        });
      }
    }
  });
}

for (const weightClass in fightersByWeightClass) {
  fightersByWeightClass[weightClass].sort((a, b) => {
    return getRankValue(a.currentRank) - getRankValue(b.currentRank);
  });
}

const activeWeightClasses = weightClasses.filter(wc => 
  fightersByWeightClass[wc] && fightersByWeightClass[wc].length > 0
);

const selectedWeightClass = activeWeightClasses.length > 0 ? activeWeightClasses[0] : "Heavyweight";
---

<Layout title="UFC Rankings">
  <main class="rankings-page">
    <h1 class="rankings-title">UFC Rankings</h1>
    
    <div class="rankings-nav-links">
      <a href="/fighters" class="rankings-nav-link">All Fighters</a>
      <a href="/rankings" class="rankings-nav-link active">Rankings</a>
    </div>
    
    <!-- Keep original tabs -->
    <div class="rankings-weight-class-tabs">
      {activeWeightClasses.map(weightClass => (
        <button 
          class={`rankings-weight-tab ${weightClass === selectedWeightClass ? 'active' : ''}`}
          data-weight-class={weightClass}
        >
          {weightClass}
        </button>
      ))}
    </div>
    
    <!-- Add mobile dropdown that will only show on mobile -->
    <div class="rankings-weight-dropdown">
      <select id="weight-class-dropdown">
        {activeWeightClasses.map(weightClass => (
          <option 
            value={weightClass} 
            selected={weightClass === selectedWeightClass}
          >
            {weightClass}
          </option>
        ))}
      </select>
    </div>
    
    {activeWeightClasses.map(weightClass => (
      <div 
        class={`rankings-weight-class-section ${weightClass === selectedWeightClass ? 'active' : ''}`}
        id={`weight-class-${weightClass.replace(/\s+/g, '-').replace(/'/g, '').toLowerCase()}`}
      >
        <div class="rankings-fighters-grid">
          {fightersByWeightClass[weightClass].map((fighter: any) => (
            <a href={`/fighters/${fighter.id}`} class={`rankings-fighter-card ${fighter.currentRank === "Champion" ? 'rankings-champion' : fighter.currentRank === "Interim Champion" ? 'rankings-interim-champion' : ''}`}>
              <div class="rankings-fighter-info">
                <div class="rankings-fighter-header">
                  {fighter.nationality && (
                    <div class="rankings-fighter-flag" data-country={fighter.nationality.toLowerCase().replace(/\s+/g, '-')}>
                      <span class="rankings-flag-code">{fighter.nationality}</span>
                    </div>
                  )}
                  <h3 class="rankings-fighter-name">{fighter.name}</h3>
                </div>
                {fighter.nickname && <p class="rankings-fighter-nickname">{fighter.nickname}</p>}
                
                <div class="rankings-fighter-record">
                  <span class="rankings-record-numbers">{fighter.wins}-{fighter.losses}-{fighter.draws}</span>
                  <span class="rankings-record-label">Record</span>
                </div>
              </div>
              
              <div class="rankings-fighter-rank">{fighter.currentRank}</div>
            </a>
          ))}
        </div>
      </div>
    ))}
  </main>
</Layout>

<script>
  const tabButtons = document.querySelectorAll('.rankings-weight-tab');
  const fighterTabs = document.querySelectorAll('.rankings-weight-class-section');
  
  // Tab button click handlers
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      const weightClass = button.getAttribute('data-weight-class');
      
      if (weightClass) {
        tabButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        fighterTabs.forEach(tab => tab.classList.remove('active'));
        const tabElement = document.getElementById(`weight-class-${weightClass.replace(/\s+/g, '-').replace(/'/g, '').toLowerCase()}`);
        if (tabElement) {
          tabElement.classList.add('active');
        }
      }
    });
  });
  
  // Handle mobile dropdown for weight classes
  const weightClassDropdown = document.getElementById('weight-class-dropdown') as HTMLSelectElement;
  if (weightClassDropdown) {
    weightClassDropdown.addEventListener('change', () => {
      const selectedValue = weightClassDropdown.value;
      
      // Hide all weight class sections
      fighterTabs.forEach(tab => tab.classList.remove('active'));
      
      // Show the selected section
      const tabElement = document.getElementById(`weight-class-${selectedValue.replace(/\s+/g, '-').replace(/'/g, '').toLowerCase()}`);
      if (tabElement) {
        tabElement.classList.add('active');
      }
      
      // Update active tab button (even though it's hidden on mobile)
      tabButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-weight-class') === selectedValue) {
          btn.classList.add('active');
        }
      });
    });
  }
</script>