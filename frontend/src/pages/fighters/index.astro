---
import Layout from '../../layouts/Layout.astro';
import FilterDropdown from '../../components/FilterDropdown.astro';

interface Fighter {
  id: string;
  name: string;
  weight_class: string | null | undefined;
  nationality: string | null;
  wins: number | null;
  losses: number | null;
  draws: number | null;
  rank: string | null;
  status: string | null;
  no_contests: number | null;
}

interface FilterOption {
  value: string;
  label: string;
}

// Dummy data instead of Supabase queries
const allFighters: Fighter[] = [
  {
    id: '1',
    name: 'Jon Jones',
    weight_class: 'Heavyweight',
    nationality: 'United States',
    wins: 27,
    losses: 1,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 1,
  },
  {
    id: '2',
    name: 'Alex Pereira',
    weight_class: 'Light Heavyweight',
    nationality: 'Brazil',
    wins: 9,
    losses: 2,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '3',
    name: 'Israel Adesanya',
    weight_class: 'Middleweight',
    nationality: 'Nigeria',
    wins: 24,
    losses: 3,
    draws: 0,
    rank: '1',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '4',
    name: 'Leon Edwards',
    weight_class: 'Welterweight',
    nationality: 'United Kingdom',
    wins: 21,
    losses: 3,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 1,
  },
  {
    id: '5',
    name: 'Islam Makhachev',
    weight_class: 'Lightweight',
    nationality: 'Russia',
    wins: 25,
    losses: 1,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '6',
    name: 'Ilia Topuria',
    weight_class: 'Featherweight',
    nationality: 'Spain',
    wins: 15,
    losses: 0,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '7',
    name: "Sean O'Malley",
    weight_class: 'Bantamweight',
    nationality: 'United States',
    wins: 17,
    losses: 1,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 1,
  },
  {
    id: '8',
    name: 'Alexandre Pantoja',
    weight_class: 'Flyweight',
    nationality: 'Brazil',
    wins: 27,
    losses: 5,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '9',
    name: 'Zhang Weili',
    weight_class: "Women's Strawweight",
    nationality: 'China',
    wins: 24,
    losses: 3,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '10',
    name: 'Alexa Grasso',
    weight_class: "Women's Flyweight",
    nationality: 'Mexico',
    wins: 16,
    losses: 3,
    draws: 1,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '11',
    name: 'Julianna Peña',
    weight_class: "Women's Bantamweight",
    nationality: 'United States',
    wins: 12,
    losses: 5,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '12',
    name: 'Dricus Du Plessis',
    weight_class: 'Middleweight',
    nationality: 'South Africa',
    wins: 21,
    losses: 2,
    draws: 0,
    rank: 'Champion',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '13',
    name: 'Dustin Poirier',
    weight_class: 'Lightweight',
    nationality: 'United States',
    wins: 29,
    losses: 8,
    draws: 0,
    rank: '3',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '14',
    name: 'Charles Oliveira',
    weight_class: 'Lightweight',
    nationality: 'Brazil',
    wins: 34,
    losses: 9,
    draws: 0,
    rank: '2',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '15',
    name: 'Max Holloway',
    weight_class: 'Featherweight',
    nationality: 'United States',
    wins: 26,
    losses: 7,
    draws: 0,
    rank: '1',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '16',
    name: 'Robert Whittaker',
    weight_class: 'Middleweight',
    nationality: 'Australia',
    wins: 25,
    losses: 7,
    draws: 0,
    rank: '3',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '17',
    name: 'Colby Covington',
    weight_class: 'Welterweight',
    nationality: 'United States',
    wins: 17,
    losses: 4,
    draws: 0,
    rank: '4',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '18',
    name: 'Brandon Moreno',
    weight_class: 'Flyweight',
    nationality: 'Mexico',
    wins: 21,
    losses: 7,
    draws: 2,
    rank: '1',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '19',
    name: 'Merab Dvalishvili',
    weight_class: 'Bantamweight',
    nationality: 'Georgia',
    wins: 16,
    losses: 4,
    draws: 0,
    rank: '1',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '20',
    name: 'Tom Aspinall',
    weight_class: 'Heavyweight',
    nationality: 'United Kingdom',
    wins: 14,
    losses: 3,
    draws: 0,
    rank: '1',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '21',
    name: 'Khabib Nurmagomedov',
    weight_class: 'Lightweight',
    nationality: 'Russia',
    wins: 29,
    losses: 0,
    draws: 0,
    rank: null,
    status: 'Retired',
    no_contests: 0,
  },
  {
    id: '22',
    name: 'Conor McGregor',
    weight_class: 'Lightweight',
    nationality: 'Ireland',
    wins: 22,
    losses: 6,
    draws: 0,
    rank: '15',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '23',
    name: 'Amanda Nunes',
    weight_class: "Women's Bantamweight",
    nationality: 'Brazil',
    wins: 22,
    losses: 5,
    draws: 0,
    rank: null,
    status: 'Retired',
    no_contests: 0,
  },
  {
    id: '24',
    name: 'Francis Ngannou',
    weight_class: 'Heavyweight',
    nationality: 'Cameroon',
    wins: 17,
    losses: 3,
    draws: 0,
    rank: null,
    status: 'Not Fighting',
    no_contests: 0,
  },
  {
    id: '25',
    name: 'Valentina Shevchenko',
    weight_class: "Women's Flyweight",
    nationality: 'Kyrgyzstan',
    wins: 23,
    losses: 4,
    draws: 0,
    rank: '1',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '26',
    name: 'Justin Gaethje',
    weight_class: 'Lightweight',
    nationality: 'United States',
    wins: 25,
    losses: 4,
    draws: 0,
    rank: '4',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '27',
    name: 'Belal Muhammad',
    weight_class: 'Welterweight',
    nationality: 'United States',
    wins: 22,
    losses: 3,
    draws: 1,
    rank: '2',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '28',
    name: 'Rose Namajunas',
    weight_class: "Women's Flyweight",
    nationality: 'United States',
    wins: 12,
    losses: 6,
    draws: 0,
    rank: '2',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '29',
    name: 'Aljamain Sterling',
    weight_class: 'Featherweight',
    nationality: 'United States',
    wins: 23,
    losses: 4,
    draws: 0,
    rank: '5',
    status: 'Active',
    no_contests: 0,
  },
  {
    id: '30',
    name: 'Stipe Miocic',
    weight_class: 'Heavyweight',
    nationality: 'United States',
    wins: 20,
    losses: 4,
    draws: 0,
    rank: '2',
    status: 'Active',
    no_contests: 0,
  },
];

const weightClasses = [
  'Flyweight',
  'Bantamweight',
  'Featherweight',
  'Lightweight',
  'Welterweight',
  'Middleweight',
  'Light Heavyweight',
  'Heavyweight',
  "Women's Strawweight",
  "Women's Flyweight",
  "Women's Bantamweight",
  "Women's Featherweight",
];

const nationalities = [
  'United States',
  'Brazil',
  'Nigeria',
  'United Kingdom',
  'Russia',
  'Spain',
  'China',
];

const weightClassOrderMap: Record<string, number> = {
  Flyweight: 1,
  Bantamweight: 2,
  Featherweight: 3,
  Lightweight: 4,
  Welterweight: 5,
  Middleweight: 6,
  'Light Heavyweight': 7,
  Heavyweight: 8,
  "Women's Strawweight": 9,
  "Women's Flyweight": 10,
  "Women's Bantamweight": 11,
  "Women's Featherweight": 12,
};

const fightersList = allFighters;
const totalFighters = fightersList.length;
const initialVisible = 10;
const fightersData = JSON.stringify(fightersList);

const statusOptions: FilterOption[] = [
  { value: '', label: 'All' },
  { value: 'Active', label: 'Active' },
  { value: 'Retired', label: 'Retired' },
];

const championOptions: FilterOption[] = [
  { value: '', label: 'All' },
  { value: 'champion', label: 'Champions Only' },
];

const weightClassOptions: FilterOption[] = [
  { value: '', label: 'All' },
  ...weightClasses.map(wc => ({
    value: wc || '',
    label: wc || 'Unknown',
  })),
];

const nationalityOptions: FilterOption[] = [
  { value: '', label: 'All' },
  ...nationalities.map(nat => ({
    value: nat || '',
    label: nat || 'Unknown',
  })),
];
---

<Layout title="UFC Fighters">
  <main class="fighters-page">
    <section class="fighters-container">
      <h1>UFC Fighters</h1>

      <div class="filters-section">
        <div class="search-container">
          <input
            type="text"
            id="fighter-search"
            class="search-input"
            placeholder="Search fighter name..."
            autocomplete="off"
          />
          <button
            id="clear-search"
            class="clear-search-button"
            style="display: none;">×</button
          >
        </div>

        <div class="filters-container">
          <select id="status-filter" class="filter-select hidden-select">
            <option value="">All Statuses</option>
            <option value="Active">Active</option>
            <option value="Retired">Retired</option>
          </select>

          <select id="champion-filter" class="filter-select hidden-select">
            <option value="">All Fighters</option>
            <option value="champion">Champions Only</option>
          </select>

          <select id="weight-class-filter" class="filter-select hidden-select">
            <option value="">All Weight Classes</option>
            {
              weightClasses.map(weightClass => (
                <option value={weightClass || ''}>
                  {weightClass || 'Unknown'}
                </option>
              ))
            }
          </select>

          <select id="nationality-filter" class="filter-select hidden-select">
            <option value="">All Nationalities</option>
            {
              nationalities.map(nationality => (
                <option value={nationality || ''}>
                  {nationality || 'Unknown'}
                </option>
              ))
            }
          </select>

          <div class="custom-filters">
            <FilterDropdown
              label="Status"
              options={statusOptions}
              currentValue=""
              id="status-filter"
            />

            <FilterDropdown
              label="Champion"
              options={championOptions}
              currentValue=""
              id="champion-filter"
            />

            <FilterDropdown
              label="Weight Class"
              options={weightClassOptions}
              currentValue=""
              id="weight-class-filter"
            />

            <FilterDropdown
              label="Nationality"
              options={nationalityOptions}
              currentValue=""
              id="nationality-filter"
            />

            <button id="reset-filters" class="reset-button"
              >Reset Filters</button
            >
          </div>
        </div>
      </div>

      <div id="selected-filters-pool" class="selected-filters-pool"></div>

      <div class="fighters-grid" id="fighters-grid">
        {
          fightersList.slice(0, initialVisible).map(fighter => (
            <a
              href={`/fighters/${fighter.id}`}
              class="fighter-card"
              data-weight-class={fighter.weight_class || ''}
              data-nationality={fighter.nationality || ''}
              data-status={fighter.status || ''}
              data-rank={fighter.rank || ''}
            >
              <div class="fighter-header">
                <h2>{fighter.name}</h2>
                {fighter.rank === 'Champion' ? (
                  <span class="champion-badge">Champion</span>
                ) : fighter.status === 'Active' ? (
                  <span class="active-badge">Active</span>
                ) : fighter.status === 'Retired' ||
                  fighter.status === 'Not Fighting' ? (
                  <span class="retired-badge">Retired</span>
                ) : null}
              </div>
              <div class="fighter-details">
                {fighter.weight_class && (
                  <p class="fighter-weight-class">{fighter.weight_class}</p>
                )}
                <div class="fighter-record">
                  <span class="record-value">
                    {fighter.wins || 0}-{fighter.losses || 0}-
                    {fighter.draws || 0}
                  </span>
                  <span class="record-label">W-L-D</span>
                  <span class="record-nc">
                    {(fighter.no_contests ?? 0) > 0
                      ? `${fighter.no_contests} NC`
                      : ''}
                  </span>
                </div>
                {fighter.rank &&
                  fighter.rank !== 'Champion' &&
                  fighter.rank !== 'NR' &&
                  fighter.rank !== 'Unranked' && (
                    <div class="fighter-rank">Rank: {fighter.rank}</div>
                  )}
                {fighter.nationality && (
                  <p class="fighter-nationality">{fighter.nationality}</p>
                )}
              </div>
            </a>
          ))
        }
      </div>

      <div id="no-results" class="no-results" style="display: none;">
        <p>
          No fighters match your current filters. Try adjusting your criteria.
        </p>
      </div>

      <div class="load-more-container">
        <button
          id="load-more"
          class="load-more-button"
          data-current-count={initialVisible}
        >
          Load More Fighters
        </button>
        <p class="fighters-count">
          Showing <span id="shown-count"
            >{Math.min(initialVisible, fightersList.length)}</span
          > of <span id="total-count">{totalFighters}</span> fighters
          <span id="filtered-text" style="display: none;"> (filtered)</span>
        </p>
      </div>
      <div id="fighters-data" style="display: none;">{fightersData}</div>
    </section>
  </main>
</Layout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Get elements
    const searchInput = document.getElementById('fighter-search');
    const clearSearchBtn = document.getElementById('clear-search');
    const statusFilter = document.getElementById('status-filter');
    const championFilter = document.getElementById('champion-filter');
    const resetFiltersButton = document.getElementById('reset-filters');
    const selectedFiltersPool = document.getElementById(
      'selected-filters-pool',
    );
    const loadMoreButton = document.getElementById('load-more');
    const fightersGrid = document.getElementById('fighters-grid');
    const shownCountSpan = document.getElementById('shown-count');
    const totalCountSpan = document.getElementById('total-count');
    const filteredTextSpan = document.getElementById('filtered-text');
    const noResultsDiv = document.getElementById('no-results');

    // Parse fighters data from server
    const allFighters = JSON.parse(
      document.getElementById('fighters-data').textContent,
    );

    // Load more configuration
    const itemsPerPage = 10;
    let currentPage = 1;

    // Active filters
    let currentFilters = {
      search: '',
      status: '',
      champion: false,
      weightClasses: new Set(),
      nationalities: new Set(),
    };

    // Keep track of currently displayed fighters
    let displayedFighters = [];

    // Apply filters and update display
    function applyFilters() {
      // Filter the fighters based on current criteria
      let filteredFighters = [...allFighters];

      // Apply search filter
      if (currentFilters.search) {
        filteredFighters = filteredFighters.filter(fighter =>
          fighter.name
            .toLowerCase()
            .includes(currentFilters.search.toLowerCase()),
        );
      }

      // Apply status filter
      if (currentFilters.status) {
        filteredFighters = filteredFighters.filter(
          fighter => fighter.status === currentFilters.status,
        );
      }

      // Apply champion filter
      if (currentFilters.champion) {
        filteredFighters = filteredFighters.filter(
          fighter => fighter.rank === 'Champion',
        );
      }

      // Apply weight class filters
      if (currentFilters.weightClasses.size > 0) {
        filteredFighters = filteredFighters.filter(fighter =>
          currentFilters.weightClasses.has(fighter.weight_class),
        );
      }

      // Apply nationality filters
      if (currentFilters.nationalities.size > 0) {
        filteredFighters = filteredFighters.filter(fighter =>
          currentFilters.nationalities.has(fighter.nationality),
        );
      }

      // Reset pagination when filters change
      currentPage = 1;

      // Update display with first page of results
      displayedFighters = filteredFighters;
      updateFightersDisplay(filteredFighters, true);
      updateFilterTags();
    }

    // Update fighters grid display
    function updateFightersDisplay(fighters, resetGrid = false) {
      // Calculate which fighters to show based on pagination
      const totalToShow = currentPage * itemsPerPage;
      const fightersToShow = fighters.slice(0, totalToShow);

      // Check if we have any results
      if (fighters.length === 0) {
        noResultsDiv.style.display = 'block';
        loadMoreButton.style.display = 'none';
        shownCountSpan.textContent = '0';
        totalCountSpan.textContent = '0';

        // Clear the grid if resetting
        if (resetGrid) {
          fightersGrid.innerHTML = '';
        }
        return;
      }

      // Hide no results message
      noResultsDiv.style.display = 'none';

      // Clear grid if resetting
      if (resetGrid) {
        fightersGrid.innerHTML = '';
      }

      // Add fighters to grid
      for (
        let i = resetGrid ? 0 : (currentPage - 1) * itemsPerPage;
        i < fightersToShow.length;
        i++
      ) {
        const fighter = fighters[i];

        // Skip if this fighter card already exists (when adding more)
        if (!resetGrid && i < (currentPage - 1) * itemsPerPage) {
          continue;
        }

        const fighterCard = document.createElement('a');
        fighterCard.href = `/fighters/${fighter.id}`;
        fighterCard.className = 'fighter-card';
        fighterCard.dataset.weightClass = fighter.weight_class || '';
        fighterCard.dataset.nationality = fighter.nationality || '';
        fighterCard.dataset.status = fighter.status || '';
        fighterCard.dataset.rank = fighter.rank || '';

        const wins = fighter.wins || 0;
        const losses = fighter.losses || 0;
        const draws = fighter.draws || 0;
        const noContests = fighter.no_contests || 0;

        let statusBadgeHTML = '';
        if (fighter.rank === 'Champion') {
          statusBadgeHTML = '<span class="champion-badge">Champion</span>';
        } else if (fighter.status === 'Active') {
          statusBadgeHTML = '<span class="active-badge">Active</span>';
        } else if (
          fighter.status === 'Retired' ||
          fighter.status === 'Not Fighting'
        ) {
          statusBadgeHTML = '<span class="retired-badge">Retired</span>';
        }

        fighterCard.innerHTML = `
          <div class="fighter-header">
            <h2>${fighter.name}</h2>
            ${statusBadgeHTML}
          </div>
          <div class="fighter-details">
            ${fighter.weight_class ? `<p class="fighter-weight-class">${fighter.weight_class}</p>` : ''}
            <div class="fighter-record">
              <span class="record-value">${wins}-${losses}-${draws}</span>
              <span class="record-label">W-L-D</span>
              ${noContests > 0 ? `<span class="record-nc">${noContests} NC</span>` : ''}
            </div>
            ${
              fighter.rank &&
              fighter.rank !== 'Champion' &&
              fighter.rank !== 'NR' &&
              fighter.rank !== 'Unranked'
                ? `<div class="fighter-rank">Rank: ${fighter.rank}</div>`
                : ''
            }
            ${
              fighter.nationality
                ? `<p class="fighter-nationality">${fighter.nationality}</p>`
                : ''
            }
          </div>
        `;

        fightersGrid.appendChild(fighterCard);
      }

      // Update counts
      shownCountSpan.textContent = Math.min(
        totalToShow,
        fighters.length,
      ).toString();
      totalCountSpan.textContent = fighters.length.toString();

      // Update filtered text
      const isFiltered =
        currentFilters.search ||
        currentFilters.status ||
        currentFilters.champion ||
        currentFilters.weightClasses.size > 0 ||
        currentFilters.nationalities.size > 0;

      filteredTextSpan.style.display = isFiltered ? 'inline' : 'none';

      // Show/hide load more button based on whether there are more fighters to show
      if (totalToShow < fighters.length) {
        loadMoreButton.style.display = 'block';
        loadMoreButton.dataset.currentCount = totalToShow.toString();
      } else {
        loadMoreButton.style.display = 'none';
      }
    }

    // Update the filter tags displayed to the user
    function updateFilterTags() {
      // Clear existing tags
      selectedFiltersPool.innerHTML = '';

      // Add search tag if applicable
      if (currentFilters.search) {
        const titleCased = currentFilters.search
          .split(' ')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');

        addFilterTag('search', currentFilters.search, `Search: ${titleCased}`);
      }

      // Add status tag
      if (currentFilters.status) {
        addFilterTag('status', currentFilters.status, currentFilters.status);
      }

      // Add champion tag
      if (currentFilters.champion) {
        addFilterTag('champion', 'champion', 'Champions Only');
      }

      // Add weight class tags
      currentFilters.weightClasses.forEach(weightClass => {
        addFilterTag('weight-class', weightClass, weightClass);
      });

      // Add nationality tags
      currentFilters.nationalities.forEach(nationality => {
        addFilterTag('nationality', nationality, nationality);
      });
    }

    // Add a filter tag to the UI
    function addFilterTag(type, value, label) {
      const filterTag = document.createElement('div');
      filterTag.className = `filter-tag ${type}`;
      filterTag.dataset.value = value;
      filterTag.innerHTML = `
        ${label}
        <span class="filter-tag-remove">×</span>
      `;

      // Add click handler to remove tag
      filterTag
        .querySelector('.filter-tag-remove')
        .addEventListener('click', () => {
          removeFilter(type, value);
        });

      selectedFiltersPool.appendChild(filterTag);
    }

    // Remove a filter when tag is clicked
    function removeFilter(type, value) {
      switch (type) {
        case 'search':
          searchInput.value = '';
          currentFilters.search = '';
          clearSearchBtn.style.display = 'none';
          break;
        case 'status':
          statusFilter.value = '';
          currentFilters.status = '';
          updateDropdownText(
            document.getElementById('status-filter-dropdown'),
            '',
          );
          break;
        case 'champion':
          championFilter.value = '';
          currentFilters.champion = false;
          updateDropdownText(
            document.getElementById('champion-filter-dropdown'),
            '',
          );
          break;
        case 'weight-class':
          currentFilters.weightClasses.delete(value);
          updateMultiDropdownText(
            document.getElementById('weight-class-filter-dropdown'),
            currentFilters.weightClasses,
          );
          break;
        case 'nationality':
          currentFilters.nationalities.delete(value);
          updateMultiDropdownText(
            document.getElementById('nationality-filter-dropdown'),
            currentFilters.nationalities,
          );
          break;
      }

      // Apply filters again
      applyFilters();
    }

    // Update dropdown display text for single select
    function updateDropdownText(dropdown, value) {
      if (!dropdown) return;

      const selectedDisplay = dropdown.querySelector('.filter-selected span');
      const menuItems = dropdown.querySelectorAll('.filter-item');

      // Reset active state on all items
      menuItems.forEach(item => {
        item.classList.remove('active');

        if (item.getAttribute('data-value') === value) {
          // Update text display and set this item as active
          selectedDisplay.textContent = item.textContent;
          item.classList.add('active');
        }
      });

      // If no value selected, set to "All"
      if (!value) {
        const defaultItem = dropdown.querySelector(
          '.filter-item[data-value=""]',
        );
        if (defaultItem) {
          selectedDisplay.textContent = defaultItem.textContent;
          defaultItem.classList.add('active');
        }
      }
    }

    // Update dropdown display for multi select
    function updateMultiDropdownText(dropdown, selectedValues) {
      if (!dropdown) return;

      const display = dropdown.querySelector('.filter-selected span');
      const menuItems = dropdown.querySelectorAll('.filter-item');

      // Update all menu items
      menuItems.forEach(item => {
        const itemValue = item.getAttribute('data-value');
        if (itemValue === '') {
          // Special case for "All"
          item.classList.toggle('active', selectedValues.size === 0);
        } else {
          item.classList.toggle('active', selectedValues.has(itemValue));
        }
      });

      // Update display text
      if (selectedValues.size === 0) {
        display.textContent = 'All';
      } else {
        display.textContent = `${selectedValues.size} selected`;
      }
    }

    // Update all dropdown displays
    function updateAllDropdowns() {
      updateDropdownText(
        document.getElementById('status-filter-dropdown'),
        currentFilters.status,
      );

      updateDropdownText(
        document.getElementById('champion-filter-dropdown'),
        currentFilters.champion ? 'champion' : '',
      );

      updateMultiDropdownText(
        document.getElementById('weight-class-filter-dropdown'),
        currentFilters.weightClasses,
      );

      updateMultiDropdownText(
        document.getElementById('nationality-filter-dropdown'),
        currentFilters.nationalities,
      );
    }

    // Search input handler
    if (searchInput) {
      searchInput.addEventListener('input', function () {
        let currentValue = this.value;
        const cursorPos = this.selectionStart;

        // Sanitize input
        let sanitized = currentValue.replace(/[^a-zA-Z ]/g, '');
        sanitized = sanitized.replace(/\s{2,}/g, ' ');

        if (sanitized !== currentValue) {
          this.value = sanitized;
          this.setSelectionRange(
            Math.min(cursorPos, sanitized.length),
            Math.min(cursorPos, sanitized.length),
          );
        }

        // Only search if 3+ characters or empty
        if (sanitized.length >= 3 || sanitized.length === 0) {
          currentFilters.search = sanitized;
          clearSearchBtn.style.display = sanitized ? 'flex' : 'none';
          applyFilters();
        }
      });
    }

    // Clear search button
    if (clearSearchBtn) {
      clearSearchBtn.addEventListener('click', function () {
        searchInput.value = '';
        currentFilters.search = '';
        this.style.display = 'none';
        applyFilters();
      });
    }

    // Status filter change
    if (statusFilter) {
      statusFilter.addEventListener('change', function () {
        currentFilters.status = this.value;
        applyFilters();
      });
    }

    // Champion filter change
    if (championFilter) {
      championFilter.addEventListener('change', function () {
        currentFilters.champion = this.value === 'champion';
        applyFilters();
      });
    }

    // Reset filters button
    if (resetFiltersButton) {
      resetFiltersButton.addEventListener('click', () => {
        // Reset all filters
        searchInput.value = '';
        statusFilter.value = '';
        championFilter.value = '';

        currentFilters = {
          search: '',
          status: '',
          champion: false,
          weightClasses: new Set(),
          nationalities: new Set(),
        };

        clearSearchBtn.style.display = 'none';
        updateAllDropdowns();
        applyFilters();
      });
    }

    // Setup dropdown filter handlers
    document.querySelectorAll('.filter-dropdown').forEach(dropdown => {
      const type = dropdown.id.replace('-filter-dropdown', '');

      dropdown.querySelectorAll('.filter-item').forEach(item => {
        item.addEventListener('click', function () {
          const value = this.getAttribute('data-value');

          if (type === 'nationality') {
            if (value === '') {
              currentFilters.nationalities.clear();
            } else {
              if (currentFilters.nationalities.has(value)) {
                currentFilters.nationalities.delete(value);
              } else {
                currentFilters.nationalities.add(value);
              }
            }
            updateMultiDropdownText(dropdown, currentFilters.nationalities);
          } else if (type === 'weight-class') {
            if (value === '') {
              currentFilters.weightClasses.clear();
            } else {
              if (currentFilters.weightClasses.has(value)) {
                currentFilters.weightClasses.delete(value);
              } else {
                currentFilters.weightClasses.add(value);
              }
            }
            updateMultiDropdownText(dropdown, currentFilters.weightClasses);
          } else if (type === 'status') {
            statusFilter.value = value;
            currentFilters.status = value;
            updateDropdownText(dropdown, value);
          } else if (type === 'champion') {
            championFilter.value = value;
            currentFilters.champion = value === 'champion';
            updateDropdownText(dropdown, value);
          }

          applyFilters();
        });
      });
    });

    // Setup load more button
    if (loadMoreButton) {
      loadMoreButton.addEventListener('click', function () {
        currentPage++;
        updateFightersDisplay(displayedFighters, false);
      });

      // Show load more button if there are more fighters than initially visible
      if (allFighters.length > itemsPerPage) {
        loadMoreButton.style.display = 'block';
      } else {
        loadMoreButton.style.display = 'none';
      }
    }

    // Initialize with all fighters
    displayedFighters = allFighters;
    updateFightersDisplay(allFighters, true);
    updateAllDropdowns();
  });
</script>
