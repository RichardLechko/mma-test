---
import Layout from '../../layouts/Layout.astro';

interface Fighter {
  id: string;
  ufc_id: string;
  name: string;
  nickname: string | null;
  weight_class: string | null;
  rank: string | null;
  status: string | null;
  fighting_out_of: string | null;
  height: string | null;
  weight: string | null;
  age: number | null;
  nationality: string | null;
  wiki_url: string | null;
  ufc_url: string | null;
  reach: string | null;
  wins: number | null;
  losses: number | null;
  draws: number | null;
  no_contests: number | null;
  ko_wins: number | null;
  sub_wins: number | null;
  dec_wins: number | null;
  loss_by_ko: number | null;
  loss_by_sub: number | null;
  loss_by_dec: number | null;
  loss_by_dq: number | null;
}

// Define interfaces for better type safety in both server and client
interface Fight {
  id: string;
  event_id: string;
  event: {
    id: string;
    name: string;
    event_date: string;
  };
  fighter1_id: string;
  fighter2_id: string;
  fighter1_name: string;
  fighter2_name: string;
  fighter1_rank: string;
  fighter2_rank: string;
  weight_class: string;
  is_main_event: boolean;
  fighter1_was_champion: boolean;
  fighter2_was_champion: boolean;
  was_title_fight: boolean;
  fight_order: number;
  winner_id: string | null;
  result_method: string;
  result_method_details: string | null;
  result_round: number | null;
  result_time: string | null;
}

interface FighterRanking {
  id: string;
  fighter_id: string;
  weight_class: string;
  rank: string;
}

// Get the fighter ID from the URL
const { id } = Astro.params;
const fighterId = id || '1';

// Dummy fighter data
const fighterData: Fighter = {
  id: fighterId,
  ufc_id: "123456",
  name: "Jon Jones",
  nickname: "Bones",
  weight_class: "Heavyweight",
  rank: "Champion",
  status: "Active",
  fighting_out_of: "Rochester, New York",
  height: "76",
  weight: "248",
  age: 37,
  nationality: "United States",
  wiki_url: "https://en.wikipedia.org/wiki/Jon_Jones",
  ufc_url: "https://www.ufc.com/athlete/jon-jones",
  reach: "84",
  wins: 27,
  losses: 1,
  draws: 0,
  no_contests: 1,
  ko_wins: 10,
  sub_wins: 7,
  dec_wins: 10,
  loss_by_ko: 0,
  loss_by_sub: 0,
  loss_by_dec: 1,
  loss_by_dq: 0
};

// Dummy fighter rankings
const fighterRankings: FighterRanking[] = [
  {
    id: "1",
    fighter_id: fighterId,
    weight_class: "Heavyweight",
    rank: "Champion"
  }
];

// Dummy fights data
const sortedFights: Fight[] = [
  {
    id: "1",
    event_id: "123",
    event: {
      id: "123",
      name: "UFC 285",
      event_date: "2023-03-04T00:00:00.000Z"
    },
    fighter1_id: fighterId,
    fighter2_id: "2",
    fighter1_name: "Jon Jones",
    fighter2_name: "Ciryl Gane",
    fighter1_rank: "Champion",
    fighter2_rank: "1",
    weight_class: "Heavyweight",
    is_main_event: true,
    fighter1_was_champion: false,
    fighter2_was_champion: false,
    was_title_fight: true,
    fight_order: 1,
    winner_id: fighterId,
    result_method: "Submission",
    result_method_details: "Guillotine Choke",
    result_round: 1,
    result_time: "02:04"
  },
  {
    id: "2",
    event_id: "456",
    event: {
      id: "456",
      name: "UFC 247",
      event_date: "2020-02-08T00:00:00.000Z"
    },
    fighter1_id: fighterId,
    fighter2_id: "3",
    fighter1_name: "Jon Jones",
    fighter2_name: "Dominick Reyes",
    fighter1_rank: "Champion",
    fighter2_rank: "1",
    weight_class: "Light Heavyweight",
    is_main_event: true,
    fighter1_was_champion: true,
    fighter2_was_champion: false,
    was_title_fight: true,
    fight_order: 1,
    winner_id: fighterId,
    result_method: "Decision",
    result_method_details: "Unanimous",
    result_round: 5,
    result_time: "25:00"
  },
  {
    id: "3",
    event_id: "789",
    event: {
      id: "789",
      name: "UFC 235",
      event_date: "2019-03-02T00:00:00.000Z"
    },
    fighter1_id: fighterId,
    fighter2_id: "4",
    fighter1_name: "Jon Jones",
    fighter2_name: "Anthony Smith",
    fighter1_rank: "Champion",
    fighter2_rank: "3",
    weight_class: "Light Heavyweight",
    is_main_event: true,
    fighter1_was_champion: true,
    fighter2_was_champion: false,
    was_title_fight: true,
    fight_order: 1,
    winner_id: fighterId,
    result_method: "Decision",
    result_method_details: "Unanimous",
    result_round: 5,
    result_time: "25:00"
  },
  {
    id: "4",
    event_id: "101",
    event: {
      id: "101",
      name: "UFC 232",
      event_date: "2018-12-29T00:00:00.000Z"
    },
    fighter1_id: fighterId,
    fighter2_id: "5",
    fighter1_name: "Jon Jones",
    fighter2_name: "Alexander Gustafsson",
    fighter1_rank: "1",
    fighter2_rank: "2",
    weight_class: "Light Heavyweight",
    is_main_event: true,
    fighter1_was_champion: false,
    fighter2_was_champion: false,
    was_title_fight: true,
    fight_order: 1,
    winner_id: fighterId,
    result_method: "KO/TKO",
    result_method_details: "Punches",
    result_round: 3,
    result_time: "02:02"
  },
  {
    id: "5",
    event_id: "202",
    event: {
      id: "202",
      name: "UFC 214",
      event_date: "2017-07-29T00:00:00.000Z"
    },
    fighter1_id: fighterId,
    fighter2_id: "6",
    fighter1_name: "Jon Jones",
    fighter2_name: "Daniel Cormier",
    fighter1_rank: "1",
    fighter2_rank: "Champion",
    weight_class: "Light Heavyweight",
    is_main_event: true,
    fighter1_was_champion: false,
    fighter2_was_champion: true,
    was_title_fight: true,
    fight_order: 1,
    winner_id: null,
    result_method: "No Contest",
    result_method_details: null,
    result_round: 3,
    result_time: "03:01"
  }
];

// Helper function to check if a fight was canceled
const isFightCanceled = (fight: Fight) => {
  const eventDate = new Date(fight.event.event_date);
  const now = new Date();
  const isEventCompleted = eventDate < now;

  return (
    isEventCompleted &&
    !fight.winner_id &&
    (!fight.result_method ||
      (fight.result_method !== 'Draw' && fight.result_method !== 'No Contest'))
  );
};
---

<Layout title={fighterData ? fighterData.name : 'Fighter Details'}>
  <main class="fighter-page">
    {
      fighterData ? (
        <div class="fighter-container">
          <div class="fighter-header">
            <div class="fighter-info">
              <h1>{fighterData.name}</h1>

              {fighterData.nickname && (
                <p class="fighter-nickname">{fighterData.nickname}</p>
              )}

              {fighterRankings.length > 0 ? (
                <div class="fighter-rankings">
                  {fighterRankings.map(ranking => (
                    <div class="fighter-rank">
                      {ranking.rank === 'Champion' ? (
                        <span class="champion-badge">Champion</span>
                      ) : ranking.rank === 'Unranked' ? (
                        <>Unranked</>
                      ) : (
                        <>Ranked {ranking.rank}</>
                      )}
                      <span class="rank-division">
                        {' '}
                        at {ranking.weight_class}
                      </span>
                    </div>
                  ))}
                </div>
              ) : (
                <>
                  {fighterData.weight_class && (
                    <p class="fighter-weight-class">
                      {fighterData.weight_class}
                    </p>
                  )}
                  {fighterData.rank && fighterData.rank !== 'NR' && (
                    <div class="fighter-rank">
                      {fighterData.rank === 'Champion' ? (
                        <span class="champion-badge">Champion</span>
                      ) : fighterData.rank === 'Unranked' ? (
                        <>Unranked</>
                      ) : (
                        <>Ranked {fighterData.rank}</>
                      )}
                    </div>
                  )}
                </>
              )}
            </div>

            {fighterData.ufc_url && (
              <a
                href={fighterData.ufc_url}
                target="_blank"
                rel="noopener noreferrer"
                class="ufc-profile-link"
              >
                UFC Profile
              </a>
            )}
          </div>

          <div class="fighter-profile">
            <div class="fighter-stats">
              <h2>Fighter Stats</h2>
              <div class="stats-grid">
                <div class="stat-item">
                  <span class="stat-label">Status</span>
                  <span class="stat-value">
                    {fighterData.status || 'Unknown'}
                  </span>
                </div>
                {fighterData.age !== null &&
                  fighterData.age !== undefined &&
                  fighterData.age > 0 && (
                    <div class="stat-item">
                      <span class="stat-label">Age</span>
                      <span class="stat-value">{fighterData.age}</span>
                    </div>
                  )}
                {fighterData.height && (
                  <div class="stat-item">
                    <span class="stat-label">Height</span>
                    <span class="stat-value">{fighterData.height} in.</span>
                  </div>
                )}
                {fighterData.weight && (
                  <div class="stat-item">
                    <span class="stat-label">Weight</span>
                    <span class="stat-value">{fighterData.weight} lbs.</span>
                  </div>
                )}
                {fighterData.reach && (
                  <div class="stat-item">
                    <span class="stat-label">Reach</span>
                    <span class="stat-value">{fighterData.reach} in.</span>
                  </div>
                )}
                {fighterData.nationality && (
                  <div class="stat-item">
                    <span class="stat-label">Nationality</span>
                    <span class="stat-value">{fighterData.nationality}</span>
                  </div>
                )}
                {fighterData.fighting_out_of && (
                  <div class="stat-item fighting-locations">
                    <span class="stat-label">Fighting Out Of</span>
                    {fighterData.fighting_out_of.includes('{') ? (
                      (() => {
                        const locations = fighterData.fighting_out_of
                          .replace(/^\{|\}$/g, '')
                          .split('}, {');

                        if (locations.length === 1) {
                          return <span class="stat-value">{locations[0]}</span>;
                        }

                        return (
                          <ul class="locations-list">
                            {locations.map(location => (
                              <li>{location}</li>
                            ))}
                          </ul>
                        );
                      })()
                    ) : (
                      <span class="stat-value">
                        {fighterData.fighting_out_of}
                      </span>
                    )}
                  </div>
                )}
              </div>
            </div>

            <div class="fighter-record">
              <h2>Fight Record</h2>
              <div class="record-card">
                <div class="record-main">
                  <div class="win-box">
                    <span class="count">{fighterData.wins || 0}</span>
                    <span class="label">WINS</span>
                  </div>
                  <div class="loss-box">
                    <span class="count">{fighterData.losses || 0}</span>
                    <span class="label">LOSSES</span>
                  </div>
                  <div class="draw-box">
                    <span class="count">{fighterData.draws || 0}</span>
                    <span class="label">DRAWS</span>
                  </div>
                  {fighterData.no_contests && fighterData.no_contests > 0 ? (
                    <div class="nc-box">
                      <span class="count">{fighterData.no_contests}</span>
                      <span class="label">NC</span>
                    </div>
                  ) : null}
                </div>
              </div>

              <div class="win-methods">
                {fighterData.ko_wins !== null &&
                  fighterData.sub_wins !== null &&
                  fighterData.dec_wins !== null && (
                    <div class="methods-container">
                      <h3>Win Methods</h3>
                      <div class="method-items">
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.ko_wins}
                          </span>
                          <span class="method-label">KO/TKO</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.sub_wins}
                          </span>
                          <span class="method-label">Submission</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.dec_wins}
                          </span>
                          <span class="method-label">Decision</span>
                        </div>
                      </div>
                    </div>
                  )}
                {fighterData.loss_by_ko !== null &&
                  fighterData.loss_by_sub !== null &&
                  fighterData.loss_by_dec !== null && (
                    <div class="methods-container">
                      <h3>Loss Methods</h3>
                      <div class="method-items">
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.loss_by_ko}
                          </span>
                          <span class="method-label">KO/TKO</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.loss_by_sub}
                          </span>
                          <span class="method-label">Submission</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.loss_by_dec}
                          </span>
                          <span class="method-label">Decision</span>
                        </div>
                        {fighterData.loss_by_dq !== null &&
                          fighterData.loss_by_dq !== undefined &&
                          fighterData.loss_by_dq > 0 && (
                            <div class="method-item">
                              <span class="method-value">
                                {fighterData.loss_by_dq}
                              </span>
                              <span class="method-label">DQ</span>
                            </div>
                          )}
                      </div>
                    </div>
                  )}
              </div>
            </div>
          </div>

          <div class="fighter-fights">
            <h2>Fight History</h2>
            {sortedFights.length > 0 ? (
              <div>
                <div class="fights-list" id="fights-list">
                  {sortedFights.slice(0, 3).map(fight => {
                    const isMainEvent = fight.is_main_event;
                    const isTitleFight = fight.was_title_fight;
                    const fighterName = fighterData.name;
                    const opponent =
                      fight.fighter1_id === fighterId
                        ? fight.fighter2_name
                        : fight.fighter1_name;
                    const opponentId =
                      fight.fighter1_id === fighterId
                        ? fight.fighter2_id
                        : fight.fighter1_id;

                    let fighterRank =
                      fight.fighter1_id === fighterId
                        ? fight.fighter1_rank
                        : fight.fighter2_rank;
                    let opponentRank =
                      fight.fighter1_id === fighterId
                        ? fight.fighter2_rank
                        : fight.fighter1_rank;

                    if (fighterRank === '#C' || fighterRank === 'C') {
                      fighterRank = 'Champion';
                    }

                    if (opponentRank === '#C' || opponentRank === 'C') {
                      opponentRank = 'Champion';
                    }

                    const eventDate = new Date(fight.event.event_date);
                    const isCanceled = isFightCanceled(fight);
                    const isWin = fight.winner_id === fighterId;

                    let result = '';
                    if (isCanceled) {
                      result = 'CANCELED';
                    } else if (fight.winner_id) {
                      result = isWin ? 'WIN' : 'LOSS';
                    } else if (fight.result_method === 'Draw') {
                      result = 'DRAW';
                    } else if (fight.result_method === 'No Contest') {
                      result = 'NC';
                    }

                    return (
                      <div
                        class={`fight-card ${isMainEvent ? 'main-event' : ''} ${isTitleFight ? 'title-fight' : ''} result-${result.toLowerCase()}`}
                      >
                        <div class="fight-date">
                          <span>
                            {eventDate.toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric',
                            })}
                          </span>
                          <div class="event-badges">
                            <span class="weight-class-badge">
                              {fight.weight_class}
                            </span>
                            {isMainEvent && (
                              <span class="main-event-badge">Main Event</span>
                            )}
                            {isTitleFight && (
                              <span class="title-fight-badge">Title Fight</span>
                            )}
                            {isCanceled && (
                              <span class="canceled-badge">Canceled</span>
                            )}
                          </div>
                        </div>

                        <div class="fight-details">
                          <a
                            href={`/events/event/${fight.event_id}`}
                            class="event-link"
                          >
                            <span class="event-name">{fight.event.name}</span>
                          </a>

                          <div class="matchup">
                            <div class="fighter-vs">
                              <div
                                class={`fighter-name-container${!isCanceled && isWin ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}`}
                              >
                                <a
                                  href={`/fighters/${fighterId}`}
                                  class="fighter-link"
                                >
                                  {fighterName}
                                </a>
                                {fighterRank && (
                                  <span
                                    class={`rank ${fighterRank === 'Champion' ? 'champion' : ''}`}
                                  >
                                    {fighterRank === 'Champion'
                                      ? 'C'
                                      : !fighterRank?.trim()
                                        ? 'Unranked'
                                        : `#${fighterRank}`}
                                  </span>
                                )}
                              </div>
                              <span class="vs">vs</span>
                              <div
                                class={`fighter-name-container${!isCanceled && !isWin && fight.winner_id ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}`}
                              >
                                <a
                                  href={`/fighters/${opponentId}`}
                                  class="fighter-link"
                                >
                                  {opponent}
                                </a>
                                {opponentRank !== null &&
                                  opponentRank !== undefined && (
                                    <span
                                      class={`rank ${opponentRank === 'Champion' ? 'champion' : ''}`}
                                    >
                                      {opponentRank === 'Champion'
                                        ? 'C'
                                        : opponentRank === ''
                                          ? 'Unranked'
                                          : `#${opponentRank}`}
                                    </span>
                                  )}
                              </div>
                              <span
                                class={`result-badge ${result.toLowerCase()}`}
                              >
                                {result}
                              </span>
                            </div>
                          </div>

                          {isCanceled ? (
                            <div class="result-method canceled">
                              Fight Canceled
                            </div>
                          ) : fight.result_method ? (
                            <div class="result-method">
                              {fight.result_method}
                              {fight.result_method_details &&
                                ` (${fight.result_method_details})`}
                              {fight.result_round && ` R${fight.result_round}`}
                              {fight.result_time &&
                                ` ${fight.result_time}`}
                            </div>
                          ) : null}
                        </div>
                      </div>
                    );
                  })}
                </div>

                {sortedFights.length > 3 && (
                  <div class="load-more-container">
                    <button id="load-more-fights" class="load-more-button">
                      Load More
                    </button>
                    <p class="fights-count">
                      Showing <span id="shown-fights-count">3</span> of{' '}
                      <span id="total-fights-count">{sortedFights.length}</span>{' '}
                      fights
                    </p>
                  </div>
                )}

                <div id="all-fights-data" style="display: none;">
                  {JSON.stringify(sortedFights)}
                </div>
                <div id="fighter-id-data" style="display: none;">
                  {fighterId}
                </div>
              </div>
            ) : (
              <div class="no-fights">
                <p>No fights on record.</p>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div class="fighter-not-found">
          <h1>Fighter Not Found</h1>
          <p>
            Sorry, the fighter you're looking for doesn't exist or has been
            removed.
          </p>
          <a href="/fighters" class="back-button">
            Back to Fighters
          </a>
        </div>
      )
    }

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // This type declaration helps TypeScript understand our fight data structure
        type Fight = {
          id: string;
          event_id: string;
          event: {
            id: string;
            name: string;
            event_date: string;
          };
          fighter1_id: string;
          fighter2_id: string;
          fighter1_name: string;
          fighter2_name: string;
          fighter1_rank: string;
          fighter2_rank: string;
          weight_class: string;
          is_main_event: boolean;
          fighter1_was_champion: boolean;
          fighter2_was_champion: boolean;
          was_title_fight: boolean;
          fight_order: number;
          winner_id: string | null;
          result_method: string;
          result_method_details: string | null;
          result_round: number | null;
          result_time: string | null;
        };
        // Get DOM elements with proper type casting
        const loadMoreButton = document.getElementById('load-more-fights') as HTMLButtonElement | null;
        const fightsList = document.getElementById('fights-list');
        const shownCountSpan = document.getElementById('shown-fights-count');
        const allFightsDataElement = document.getElementById('all-fights-data');
        const fighterIdElement = document.getElementById('fighter-id-data');

        // Check if all required elements exist
        if (
          !loadMoreButton ||
          !fightsList ||
          !shownCountSpan ||
          !allFightsDataElement ||
          !fighterIdElement
        ) {
          return;
        }

        // Parse JSON data and extract fighter ID
        const allFightsData = JSON.parse(
          allFightsDataElement.textContent || '[]'
        );
        const fighterId = fighterIdElement.textContent?.trim() || '';

        // Track how many fights are currently visible
        let visibleCount = 3;

        loadMoreButton.addEventListener('click', () => {
          // Show loading state
          loadMoreButton.innerText = 'Loading...';
          loadMoreButton.disabled = true;

          // Calculate how many more fights to load
          const remainingFights = allFightsData.length - visibleCount;
          const fightsToLoad = Math.min(3, remainingFights);

          // Get the next batch of fights
          const nextBatch = allFightsData.slice(
            visibleCount,
            visibleCount + fightsToLoad
          );

          // Increase visible count
          visibleCount += fightsToLoad;

          // Get fighter name
          const h1Element = document.querySelector('h1');
          const fighterName = h1Element ? h1Element.textContent || '' : '';

          // Add the new fights to the list
          nextBatch.forEach((fight: Fight) => {
            const isMainEvent = fight.is_main_event;
            const isTitleFight = fight.was_title_fight;

            // Determine opponent and ranks
            const opponent =
              fight.fighter1_id === fighterId
                ? fight.fighter2_name
                : fight.fighter1_name;

            const opponentId =
              fight.fighter1_id === fighterId
                ? fight.fighter2_id
                : fight.fighter1_id;

            let fighterRank =
              fight.fighter1_id === fighterId
                ? fight.fighter1_rank
                : fight.fighter2_rank;

            let opponentRank =
              fight.fighter1_id === fighterId
                ? fight.fighter2_rank
                : fight.fighter1_rank;

            // Fix any "#C" or "C" champion designation
            if (fighterRank === '#C' || fighterRank === 'C') {
              fighterRank = 'Champion';
            }

            if (opponentRank === '#C' || opponentRank === 'C') {
              opponentRank = 'Champion';
            }

            const eventDate = new Date(fight.event.event_date);

            // Check if this fight was canceled
            const isCanceled = eventDate < new Date() && 
              !fight.winner_id && 
              (!fight.result_method || (fight.result_method !== 'Draw' && fight.result_method !== 'No Contest'));

            // Determine if this fighter won
            const isWin = fight.winner_id === fighterId;

            // Determine result
            let result = '';
            if (isCanceled) {
              result = 'CANCELED';
            } else if (fight.winner_id) {
              result = isWin ? 'WIN' : 'LOSS';
            } else if (fight.result_method === 'Draw') {
              result = 'DRAW';
            } else if (fight.result_method === 'No Contest') {
              result = 'NC';
            }

            const fightCard = document.createElement('div');
            fightCard.className = `fight-card ${isMainEvent ? 'main-event' : ''} ${isTitleFight ? 'title-fight' : ''} result-${result.toLowerCase()}`;

            fightCard.innerHTML = `
              <div class="fight-date">
                <span>
                  ${eventDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                  })}
                </span>
                <div class="event-badges">
                  <span class="weight-class-badge">
                    ${fight.weight_class}
                  </span>
                  ${isMainEvent ? '<span class="main-event-badge">Main Event</span>' : ''}
                  ${isTitleFight ? '<span class="title-fight-badge">Title Fight</span>' : ''}
                  ${isCanceled ? '<span class="canceled-badge">Canceled</span>' : ''}
                </div>
              </div>

              <div class="fight-details">
                <a href="/events/event/${fight.event_id}" class="event-link">
                  <span class="event-name">${fight.event.name}</span>
                </a>

                <div class="matchup">
                  <div class="fighter-vs">
                    <div class="fighter-name-container${!isCanceled && isWin ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}">
                      <a href="/fighters/${fighterId}" class="fighter-link">
                        ${fighterName}
                      </a>
                      <span class="${fighterRank === 'Champion' ? 'rank champion' : 'rank'}">
                        ${
                          fighterRank === 'Champion'
                            ? 'C'
                            : !fighterRank || !fighterRank.trim()
                              ? 'Unranked'
                              : `#${fighterRank}`
                        }
                      </span>
                    </div>
                    <span class="vs">vs</span>
                    <div class="fighter-name-container${!isCanceled && !isWin && fight.winner_id ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}">
                      <a href="/fighters/${opponentId}" class="fighter-link">
                        ${opponent}
                      </a>
                      <span class="${opponentRank === 'Champion' ? 'rank champion' : 'rank'}">
                        ${
                          opponentRank === 'Champion'
                            ? 'C'
                            : !opponentRank || opponentRank === ''
                              ? 'Unranked'
                              : `#${opponentRank}`
                        }
                      </span>
                    </div>
                    <span class="result-badge ${result.toLowerCase()}">
                      ${result}
                    </span>
                  </div>
                </div>

                ${
                  isCanceled
                    ? `<div class="result-method canceled">Fight Canceled</div>`
                    : fight.result_method
                      ? `
                        <div class="result-method">
                          ${fight.result_method}
                          ${fight.result_method_details ? ` (${fight.result_method_details})` : ''}
                          ${fight.result_round ? ` R${fight.result_round}` : ''}
                          ${fight.result_time ? ` ${fight.result_time}` : ''}
                        </div>
                      `
                      : ''
                }
              </div>
            `;

            fightsList.appendChild(fightCard);
          });

          // Update counts
          const actualShown = Math.min(visibleCount, allFightsData.length);
          shownCountSpan.textContent = actualShown.toString();

          // Hide load more button if all fights are loaded
          if (visibleCount >= allFightsData.length) {
            loadMoreButton.style.display = 'none';
          } else {
            // Reset button state
            loadMoreButton.innerText = 'Load More';
            loadMoreButton.disabled = false;
          }
        });
      });
    </script>
  </main>
</Layout>