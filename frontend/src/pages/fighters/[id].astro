---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';

interface Fighter {
  id: string;
  ufc_id: string;
  name: string;
  nickname: string | null;
  weight_class: string | null;
  rank: string | null;
  status: string | null;
  fighting_out_of: string | null;
  height: string | null;
  weight: string | null;
  age: number | null;
  nationality: string | null;
  wiki_url: string | null;
  ufc_url: string | null;
  reach: string | null;
  wins: number | null;
  losses: number | null;
  draws: number | null;
  no_contests: number | null;
  ko_wins: number | null;
  sub_wins: number | null;
  dec_wins: number | null;
  loss_by_ko: number | null;
  loss_by_sub: number | null;
  loss_by_dec: number | null;
  loss_by_dq: number | null;
}

interface Fight {
  id: string;
  event_id: string;
  event: {
    id: string;
    name: string;
    event_date: string;
  };
  fighter1_id: string;
  fighter2_id: string;
  fighter1_name: string;
  fighter2_name: string;
  fighter1_rank: string;
  fighter2_rank: string;
  weight_class: string;
  is_main_event: boolean;
  fighter1_was_champion: boolean;
  fighter2_was_champion: boolean;
  was_title_fight: boolean;
  fight_order: number;
  winner_id: string | null;
  result_method: string;
  result_method_details: string | null;
  result_round: number | null;
  result_time: string | null;
}

interface FighterRanking {
  id: string;
  fighter_id: string;
  weight_class: string;
  rank: string;
}

// Get the fighter ID from the URL
const { id } = Astro.params;
const fighterId = id;

if (!fighterId) {
  return Astro.redirect('/fighters');
}

// Fetch the fighter details
const { data: fighter, error: fighterError } = await supabase
  .from('fighters')
  .select('*')
  .eq('id', fighterId)
  .single();

if (fighterError) {
  console.error('Error fetching fighter:', fighterError);
}

const fighterData = fighter as Fighter | null;

// Fetch the fighter's multiple rankings
const { data: rankings, error: rankingsError } = await supabase
  .from('fighter_rankings')
  .select('*')
  .eq('fighter_id', fighterId);

if (rankingsError) {
  console.error('Error fetching fighter rankings:', rankingsError);
}

const fighterRankings = (rankings as FighterRanking[]) || [];

// Fetch the fighter's fights (both as fighter1 and fighter2)
const { data: fights1, error: fights1Error } = await supabase
  .from('fights')
  .select(
    `
    *,
    event:event_id(id, name, event_date)
  `,
  )
  .eq('fighter1_id', fighterId);

const { data: fights2, error: fights2Error } = await supabase
  .from('fights')
  .select(
    `
    *,
    event:event_id(id, name, event_date)
  `,
  )
  .eq('fighter2_id', fighterId);

if (fights1Error) {
  console.error('Error fetching fights as fighter1:', fights1Error);
}

if (fights2Error) {
  console.error('Error fetching fights as fighter2:', fights2Error);
}

// Combine and sort fights by date (most recent first)
const allFights = [...(fights1 || []), ...(fights2 || [])];
const sortedFights = allFights.sort((a, b) => {
  const dateA = new Date(a.event.event_date);
  const dateB = new Date(b.event.event_date);
  return dateB.getTime() - dateA.getTime();
});

const isFightCanceled = (fight: Fight) => {
  // Check if the event date is in the past
  const eventDate = new Date(fight.event.event_date);
  const now = new Date();
  const isEventCompleted = eventDate < now;

  // A fight is considered canceled if:
  // 1. The event date is in the past
  // 2. The fight has no winner_id
  // 3. The fight has no result_method or it's not a Draw or No Contest
  return (
    isEventCompleted &&
    !fight.winner_id &&
    (!fight.result_method ||
      (fight.result_method !== 'Draw' && fight.result_method !== 'No Contest'))
  );
};
---

<Layout title={fighterData ? fighterData.name : 'Fighter Details'}>
  <main class="fighter-page">
    {
      fighterData ? (
        <div class="fighter-container">
          <div class="fighter-header">
            <div class="fighter-info">
              <h1>{fighterData.name}</h1>

              {/* Display fighter nickname if available */}
              {fighterData.nickname && (
                <p class="fighter-nickname">{fighterData.nickname}</p>
              )}

              {/* Display multiple rankings if available */}
              {fighterRankings.length > 0 ? (
                <div class="fighter-rankings">
                  {fighterRankings.map(ranking => (
                    <div class="fighter-rank">
                      {ranking.rank === 'Champion' ? (
                        <span class="champion-badge">Champion</span>
                      ) : ranking.rank === 'Unranked' ? (
                        <>Unranked</>
                      ) : (
                        <>Ranked {ranking.rank}</>
                      )}
                      <span class="rank-division">
                        {' '}
                        at {ranking.weight_class}
                      </span>
                    </div>
                  ))}
                </div>
              ) : (
                /* Fall back to single weight class and rank if no multiple rankings */
                <>
                  {fighterData.weight_class && (
                    <p class="fighter-weight-class">
                      {fighterData.weight_class}
                    </p>
                  )}
                  {fighterData.rank && fighterData.rank !== 'NR' && (
                    <div class="fighter-rank">
                      {fighterData.rank === 'Champion' ? (
                        <span class="champion-badge">Champion</span>
                      ) : fighterData.rank === 'Unranked' ? (
                        <>Unranked</>
                      ) : (
                        <>Ranked {fighterData.rank}</>
                      )}
                    </div>
                  )}
                </>
              )}
            </div>

            {fighterData.ufc_url && (
              <a
                href={fighterData.ufc_url}
                target="_blank"
                rel="noopener noreferrer"
                class="ufc-profile-link"
              >
                UFC Profile
              </a>
            )}
          </div>

          <div class="fighter-profile">
            <div class="fighter-stats">
              <h2>Fighter Stats</h2>
              <div class="stats-grid">
                <div class="stat-item">
                  <span class="stat-label">Status</span>
                  <span class="stat-value">
                    {fighterData.status || 'Unknown'}
                  </span>
                </div>
                {fighterData.age !== null &&
                  fighterData.age !== undefined &&
                  fighterData.age > 0 && (
                    <div class="stat-item">
                      <span class="stat-label">Age</span>
                      <span class="stat-value">{fighterData.age}</span>
                    </div>
                  )}
                {fighterData.height && (
                  <div class="stat-item">
                    <span class="stat-label">Height</span>
                    <span class="stat-value">{fighterData.height} in.</span>
                  </div>
                )}
                {fighterData.weight && (
                  <div class="stat-item">
                    <span class="stat-label">Weight</span>
                    <span class="stat-value">{fighterData.weight} lbs.</span>
                  </div>
                )}
                {fighterData.reach && (
                  <div class="stat-item">
                    <span class="stat-label">Reach</span>
                    <span class="stat-value">{fighterData.reach} in.</span>
                  </div>
                )}
                {fighterData.nationality && (
                  <div class="stat-item">
                    <span class="stat-label">Nationality</span>
                    <span class="stat-value">{fighterData.nationality}</span>
                  </div>
                )}
                {fighterData.fighting_out_of && (
                  <div class="stat-item fighting-locations">
                    <span class="stat-label">Fighting Out Of</span>
                    {fighterData.fighting_out_of.includes('{') ? (
                      (() => {
                        const locations = fighterData.fighting_out_of
                          .replace(/^\{|\}$/g, '')
                          .split('}, {');

                        // If there's only one location, display it as text
                        if (locations.length === 1) {
                          return <span class="stat-value">{locations[0]}</span>;
                        }

                        // If there are multiple locations, display as list
                        return (
                          <ul class="locations-list">
                            {locations.map(location => (
                              <li>{location}</li>
                            ))}
                          </ul>
                        );
                      })()
                    ) : (
                      <span class="stat-value">
                        {fighterData.fighting_out_of}
                      </span>
                    )}
                  </div>
                )}
              </div>
            </div>

            <div class="fighter-record">
              <h2>Fight Record</h2>
              <div class="record-card">
                <div class="record-main">
                  <div class="win-box">
                    <span class="count">{fighterData.wins || 0}</span>
                    <span class="label">WINS</span>
                  </div>
                  <div class="loss-box">
                    <span class="count">{fighterData.losses || 0}</span>
                    <span class="label">LOSSES</span>
                  </div>
                  <div class="draw-box">
                    <span class="count">{fighterData.draws || 0}</span>
                    <span class="label">DRAWS</span>
                  </div>
                  {fighterData.no_contests && fighterData.no_contests > 0 ? (
                    <div class="nc-box">
                      <span class="count">{fighterData.no_contests}</span>
                      <span class="label">NC</span>
                    </div>
                  ) : null}
                </div>
              </div>

              <div class="win-methods">
                {fighterData.ko_wins !== null &&
                  fighterData.sub_wins !== null &&
                  fighterData.dec_wins !== null && (
                    <div class="methods-container">
                      <h3>Win Methods</h3>
                      <div class="method-items">
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.ko_wins}
                          </span>
                          <span class="method-label">KO/TKO</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.sub_wins}
                          </span>
                          <span class="method-label">Submission</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.dec_wins}
                          </span>
                          <span class="method-label">Decision</span>
                        </div>
                      </div>
                    </div>
                  )}
                {fighterData.loss_by_ko !== null &&
                  fighterData.loss_by_sub !== null &&
                  fighterData.loss_by_dec !== null && (
                    <div class="methods-container">
                      <h3>Loss Methods</h3>
                      <div class="method-items">
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.loss_by_ko}
                          </span>
                          <span class="method-label">KO/TKO</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.loss_by_sub}
                          </span>
                          <span class="method-label">Submission</span>
                        </div>
                        <div class="method-item">
                          <span class="method-value">
                            {fighterData.loss_by_dec}
                          </span>
                          <span class="method-label">Decision</span>
                        </div>
                        {/* Only show DQ losses if the value exists AND is greater than 0 */}
                        {fighterData.loss_by_dq !== null &&
                          fighterData.loss_by_dq !== undefined &&
                          fighterData.loss_by_dq > 0 && (
                            <div class="method-item">
                              <span class="method-value">
                                {fighterData.loss_by_dq}
                              </span>
                              <span class="method-label">DQ</span>
                            </div>
                          )}
                      </div>
                    </div>
                  )}
              </div>
            </div>
          </div>

          <div class="fighter-fights">
            <h2>Fight History</h2>
            {sortedFights.length > 0 ? (
              <div>
                <div class="fights-list" id="fights-list">
                  {sortedFights.slice(0, 3).map(fight => {
                    const isMainEvent = fight.is_main_event;
                    const isTitleFight = fight.was_title_fight;
                    const fighterName = fighter.name;
                    const opponent =
                      fight.fighter1_id === fighterId
                        ? fight.fighter2_name
                        : fight.fighter1_name;
                    const opponentId =
                      fight.fighter1_id === fighterId
                        ? fight.fighter2_id
                        : fight.fighter1_id;

                    // Get the historical ranks from the fight data
                    let fighterRank =
                      fight.fighter1_id === fighterId
                        ? fight.fighter1_rank
                        : fight.fighter2_rank;
                    let opponentRank =
                      fight.fighter1_id === fighterId
                        ? fight.fighter2_rank
                        : fight.fighter1_rank;

                    // Fix any "#C" or "C" champion designation
                    if (fighterRank === '#C' || fighterRank === 'C') {
                      fighterRank = 'Champion';
                    }

                    if (opponentRank === '#C' || opponentRank === 'C') {
                      opponentRank = 'Champion';
                    }

                    const eventDate = new Date(fight.event.event_date);

                    // Check if this fight was canceled
                    const isCanceled = isFightCanceled(fight);

                    // Determine if the fighter won this fight
                    const isWin = fight.winner_id === fighterId;

                    // Determine result based on winner and canceled status
                    let result = '';
                    if (isCanceled) {
                      result = 'CANCELED';
                    } else if (fight.winner_id) {
                      result = isWin ? 'WIN' : 'LOSS';
                    } else if (fight.result_method === 'Draw') {
                      result = 'DRAW';
                    } else if (fight.result_method === 'No Contest') {
                      result = 'NC';
                    }

                    return (
                      <div
                        class={`fight-card ${isMainEvent ? 'main-event' : ''} ${isTitleFight ? 'title-fight' : ''} result-${result.toLowerCase()}`}
                      >
                        <div class="fight-date">
                          <span>
                            {eventDate.toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric',
                            })}
                          </span>
                          <div class="event-badges">
                            <span class="weight-class-badge">
                              {fight.weight_class}
                            </span>
                            {isMainEvent && (
                              <span class="main-event-badge">Main Event</span>
                            )}
                            {isTitleFight && (
                              <span class="title-fight-badge">Title Fight</span>
                            )}
                            {isCanceled && (
                              <span class="canceled-badge">Canceled</span>
                            )}
                          </div>
                        </div>

                        <div class="fight-details">
                          <a
                            href={`/events/event/${fight.event_id}`}
                            class="event-link"
                          >
                            <span class="event-name">{fight.event.name}</span>
                          </a>

                          <div class="matchup">
                            <div class="fighter-vs">
                              <div
                                class={`fighter-name-container${!isCanceled && isWin ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}`}
                              >
                                <a
                                  href={`/fighters/${fighterId}`}
                                  class="fighter-link"
                                >
                                  {fighterName}
                                </a>
                                {fighterRank && (
                                  <span
                                    class={`rank ${fighterRank === 'Champion' ? 'champion' : ''}`}
                                  >
                                    {fighterRank === 'Champion'
                                      ? 'C'
                                      : !fighterRank?.trim()
                                        ? 'Unranked'
                                        : `#${fighterRank}`}
                                  </span>
                                )}
                              </div>
                              <span class="vs">vs</span>
                              <div
                                class={`fighter-name-container${!isCanceled && !isWin && fight.winner_id ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}`}
                              >
                                <a
                                  href={`/fighters/${opponentId}`}
                                  class="fighter-link"
                                >
                                  {opponent}
                                </a>
                                {opponentRank !== null &&
                                  opponentRank !== undefined && (
                                    <span
                                      class={`rank ${opponentRank === 'Champion' ? 'champion' : ''}`}
                                    >
                                      {opponentRank === 'Champion'
                                        ? 'C'
                                        : opponentRank === ''
                                          ? 'Unranked'
                                          : `#${opponentRank}`}
                                    </span>
                                  )}
                              </div>
                              <span
                                class={`result-badge ${result.toLowerCase()}`}
                              >
                                {result}
                              </span>
                            </div>
                          </div>

                          {isCanceled ? (
                            <div class="result-method canceled">
                              Fight Canceled
                            </div>
                          ) : fight.result_method ? (
                            <div class="result-method">
                              {fight.result_method}
                              {fight.result_method_details &&
                                ` (${fight.result_method_details})`}
                              {fight.result_round && ` R${fight.result_round}`}
                              {fight.result_time &&
                                ` ${
                                  // Check if the time is duplicated (e.g., "00:04:1400:04:14")
                                  fight.result_time.length % 2 === 0 &&
                                  fight.result_time.substring(
                                    0,
                                    fight.result_time.length / 2,
                                  ) ===
                                    fight.result_time.substring(
                                      fight.result_time.length / 2,
                                    )
                                    ? fight.result_time.substring(
                                        0,
                                        fight.result_time.length / 2,
                                      )
                                    : fight.result_time
                                }`}
                            </div>
                          ) : null}
                        </div>
                      </div>
                    );
                  })}
                </div>

                {sortedFights.length > 3 && (
                  <div class="load-more-container">
                    <button id="load-more-fights" class="load-more-button">
                      Load More
                    </button>
                    <p class="fights-count">
                      Showing <span id="shown-fights-count">3</span> of{' '}
                      <span id="total-fights-count">{sortedFights.length}</span>{' '}
                      fights
                    </p>
                  </div>
                )}

                <div id="all-fights-data" style="display: none;">
                  {JSON.stringify(sortedFights)}
                </div>
                <div id="fighter-id-data" style="display: none;">
                  {fighterId}
                </div>
              </div>
            ) : (
              <div class="no-fights">
                <p>No fights on record.</p>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div class="fighter-not-found">
          <h1>Fighter Not Found</h1>
          <p>
            Sorry, the fighter you're looking for doesn't exist or has been
            removed.
          </p>
          <a href="/fighters" class="back-button">
            Back to Fighters
          </a>
        </div>
      )
    }

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Define Fight interface for type safety
        interface Fight {
          id: string;
          event_id: string;
          fighter1_id: string;
          fighter2_id: string;
          fighter1_name: string;
          fighter2_name: string;
          fighter1_rank: string;
          fighter2_rank: string;
          weight_class: string;
          is_main_event: boolean;
          was_title_fight: boolean;
          winner_id: string | null;
          result_method: string | null;
          result_method_details: string | null;
          result_round: number | null;
          result_time: string | null;
          event: {
            id: string;
            name: string;
            event_date: string;
          };
        }

        // Function to check if a fight was canceled with proper typing
        function isFightCanceled(fight: Fight): boolean {
          const eventDate = new Date(fight.event.event_date);
          const now = new Date();
          const isEventCompleted = eventDate < now;

          return (
            isEventCompleted &&
            !fight.winner_id &&
            (!fight.result_method ||
              (fight.result_method !== 'Draw' &&
                fight.result_method !== 'No Contest'))
          );
        }

        // Get DOM elements with type safety
        const loadMoreButton = document.getElementById(
          'load-more-fights',
        ) as HTMLButtonElement | null;
        const fightsList = document.getElementById('fights-list');
        const shownCountSpan = document.getElementById('shown-fights-count');
        const allFightsDataElement = document.getElementById('all-fights-data');
        const fighterIdElement = document.getElementById('fighter-id-data');

        // Check if all required elements exist
        if (
          !loadMoreButton ||
          !fightsList ||
          !shownCountSpan ||
          !allFightsDataElement ||
          !fighterIdElement
        ) {
          console.error('Required DOM elements not found');
          return;
        }

        // Safely parse JSON data and extract fighter ID
        const allFightsData = JSON.parse(
          allFightsDataElement.textContent || '[]',
        ) as Fight[];
        const fighterId = fighterIdElement.textContent?.trim() || '';

        // Track how many fights are currently visible
        let visibleCount = 3;

        loadMoreButton.addEventListener('click', () => {
          // Show loading state
          loadMoreButton.innerText = 'Loading...';
          loadMoreButton.disabled = true;

          // Calculate how many more fights to load
          const remainingFights = allFightsData.length - visibleCount;
          const fightsToLoad = Math.min(3, remainingFights);

          // Get the next batch of fights
          const nextBatch = allFightsData.slice(
            visibleCount,
            visibleCount + fightsToLoad,
          );

          // Increase visible count
          visibleCount += fightsToLoad;

          // Get fighter name safely
          const h1Element = document.querySelector('h1');
          const fighterName = h1Element ? h1Element.textContent || '' : '';

          // Add the new fights to the list
          nextBatch.forEach(fight => {
            const isMainEvent = fight.is_main_event;
            const isTitleFight = fight.was_title_fight;

            // Determine opponent and ranks
            const opponent =
              fight.fighter1_id === fighterId
                ? fight.fighter2_name
                : fight.fighter1_name;

            const opponentId =
              fight.fighter1_id === fighterId
                ? fight.fighter2_id
                : fight.fighter1_id;

            let fighterRank =
              fight.fighter1_id === fighterId
                ? fight.fighter1_rank
                : fight.fighter2_rank;

            let opponentRank =
              fight.fighter1_id === fighterId
                ? fight.fighter2_rank
                : fight.fighter1_rank;

            // Fix any "#C" or "C" champion designation
            if (fighterRank === '#C' || fighterRank === 'C') {
              fighterRank = 'Champion';
            }

            if (opponentRank === '#C' || opponentRank === 'C') {
              opponentRank = 'Champion';
            }

            const eventDate = new Date(fight.event.event_date);

            // Check if this fight was canceled
            const isCanceled = isFightCanceled(fight);

            // Determine if this fighter won
            const isWin = fight.winner_id === fighterId;

            // Determine result based on winner and canceled status
            let result = '';
            if (isCanceled) {
              result = 'CANCELED';
            } else if (fight.winner_id) {
              result = isWin ? 'WIN' : 'LOSS';
            } else if (fight.result_method === 'Draw') {
              result = 'DRAW';
            } else if (fight.result_method === 'No Contest') {
              result = 'NC';
            }

            const fightCard = document.createElement('div');
            fightCard.className = `fight-card ${isMainEvent ? 'main-event' : ''} ${isTitleFight ? 'title-fight' : ''} result-${result.toLowerCase()}`;

            fightCard.innerHTML = `
        <div class="fight-date">
          <span>
            ${eventDate.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            })}
          </span>
          <div class="event-badges">
            <span class="weight-class-badge">
              ${fight.weight_class}
            </span>
            ${isMainEvent ? '<span class="main-event-badge">Main Event</span>' : ''}
            ${isTitleFight ? '<span class="title-fight-badge">Title Fight</span>' : ''}
            ${isCanceled ? '<span class="canceled-badge">Canceled</span>' : ''}
          </div>
        </div>

        <div class="fight-details">
          <a href="/events/event/${fight.event_id}" class="event-link">
            <span class="event-name">${fight.event.name}</span>
          </a>

          <div class="matchup">
            <div class="fighter-vs">
              <div class="fighter-name-container${!isCanceled && isWin ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}">
                <a href="/fighters/${fighterId}" class="fighter-link">
                  ${fighterName}
                </a>
                <span class="${fighterRank === 'Champion' ? 'rank champion' : 'rank'}">
                  ${
                    fighterRank === 'Champion'
                      ? 'C'
                      : !fighterRank || !fighterRank.trim()
                        ? 'Unranked'
                        : `#${fighterRank}`
                  }
                </span>
              </div>
              <span class="vs">vs</span>
              <div class="fighter-name-container${!isCanceled && !isWin && fight.winner_id ? ' winner' : ''} ${isCanceled ? 'canceled' : ''}">
                <a href="/fighters/${opponentId}" class="fighter-link">
                  ${opponent}
                </a>
                <span class="${opponentRank === 'Champion' ? 'rank champion' : 'rank'}">
                  ${
                    opponentRank === 'Champion'
                      ? 'C'
                      : !opponentRank || opponentRank === ''
                        ? 'Unranked'
                        : `#${opponentRank}`
                  }
                </span>
              </div>
              <span class="result-badge ${result.toLowerCase()}">
                ${result}
              </span>
            </div>
          </div>

          ${
            isCanceled
              ? `<div class="result-method canceled">Fight Canceled</div>`
              : fight.result_method
                ? `
                  <div class="result-method">
                    ${fight.result_method}
                    ${fight.result_method_details ? ` (${fight.result_method_details})` : ''}
                    ${fight.result_round ? ` R${fight.result_round}` : ''}
                    ${
                      fight.result_time
                        ? ` ${
                            // Check if the time is duplicated (e.g., "00:04:1400:04:14")
                            fight.result_time.length % 2 === 0 &&
                            fight.result_time.substring(
                              0,
                              fight.result_time.length / 2,
                            ) ===
                              fight.result_time.substring(
                                fight.result_time.length / 2,
                              )
                              ? fight.result_time.substring(
                                  0,
                                  fight.result_time.length / 2,
                                )
                              : fight.result_time
                          }`
                        : ''
                    }
                  </div>
                `
                : ''
          }
        </div>
      `;

            fightsList.appendChild(fightCard);
          });

          // Update counts
          const actualShown = Math.min(visibleCount, allFightsData.length);
          shownCountSpan.textContent = actualShown.toString();

          // Hide load more button if all fights are loaded
          if (visibleCount >= allFightsData.length) {
            loadMoreButton.style.display = 'none';
          } else {
            // Reset button state
            loadMoreButton.innerText = 'Load More';
            loadMoreButton.disabled = false;
          }
        });
      });
    </script>
  </main>
</Layout>
